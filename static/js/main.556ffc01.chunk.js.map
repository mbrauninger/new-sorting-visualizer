{"version":3,"sources":["Components/sidenav.js","Components/navbar.js","home.js","Components/styledbutton.js","quickSort.js","bubbleSort.js","insertionSort.js","heapSort.js","App.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","list","width","fullList","menuButton","color","nested","position","left","ListItemLink","props","ListItem","button","component","TemporaryDrawer","classes","React","useState","state","setState","toggleDrawer","anchor","open","event","type","key","map","Fragment","IconButton","className","onClick","Drawer","onClose","clsx","role","onKeyDown","List","href","ListItemIcon","ListItemText","primary","theme","root","height","background","marginBottom","menubar","backgroundColor","boxShadow","divider","logo","maxWidth","padding","menu_button","fontWeight","fontSize","marginLeft","spacing","marginRight","createMuiTheme","breakpoints","values","xs","sm","md","lg","xl","Navbar","AppBar","elevation","Toolbar","Grid","container","direction","justify","alignItems","Hidden","lgUp","edge","aria-label","right","mx","src","alt","mdDown","Button","Home","margin","header","innerContainer","text","fontFamily","down","separator","image","smallScreenImage","marginTop","style","ThemeProvider","display","m","textAlign","xsDown","smUp","styled_button","borderRadius","StyledButton","function","Canvas","canvasState","canvasWidth","window","innerWidth","canvasHeight","RadioButtonsGroup","bind","FinalCanvas","randomIntFromRange","initialize","placeIAndJ","switchElements","returnIAndJ","partition","animate","start","pausePlay","reset","canvasRef","createRef","elementWidth","elementHeight","elementColor","sortedColor","elementArray","yValue","x0Value","sortedList","ijList","ijValueArray","arrayStack","iDistance","jDistance","iRunNumber","jRunNumber","speedFactor","referenceNumber","number","sortState","myReq","doAnim","firstPress","speedChosen","nextSpeed","sortingFinished","num1","num2","distance","randomDistanceBetween","Math","random","floor","this","canvas","current","c","getContext","fillStyle","clearRect","innerHeight","fillRect","Box","x","y","value","beginPath","rect","fill","stroke","closePath","font","fillText","dx","dy","i","listElement","push","length","draw","cancelAnimationFrame","array","oldNumber","initialIValue","initialJValue","j","endNumber","updateX","leftElement","rightElement","indexOf","riseNumber","runNumber","dropNumber","updateY","temp1","temp2","splice","arrayDuplicate","leftList","rightList","abs","requestAnimationFrame","alert","radioButtons","top","BlueRadio","withStyles","checked","Radio","setValue","FormControl","RadioGroup","row","name","onChange","target","Number","FormControlLabel","control","label","buttons","ref","id","Component","QuickSort","unsorted","borderColor","pivot","sorted","border","Typography","moveIAndJ","finishRun","transitionColor","jPlus1Reference","BubbleSort","moveI","moveJ","insertingArray","runRightNumber","runLeftNumber","concat","InsertionSort","parentColor","childColor","checkingNumber","sortedCount","parentValue","leftChildValue","rightChildValue","waitNumber","ceil","HeapSort","parent","children","App","document","title","path","exact","Boolean","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.556ffc01.chunk.js","sourcesContent":["import React from 'react';\nimport clsx from 'clsx';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Drawer from '@material-ui/core/Drawer';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport IconButton from '@material-ui/core/IconButton';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport HomeIcon from '@material-ui/icons/Home';\nimport LooksOneIcon from '@material-ui/icons/LooksOne';\nimport LooksTwoIcon from '@material-ui/icons/LooksTwo';\nimport LooksThreeIcon from '@material-ui/icons/Looks3';\nimport LooksFourIcon from '@material-ui/icons/Looks4';\n\nconst useStyles = makeStyles({\n  list: {\n    width: 250,\n  },\n  fullList: {\n    width: 'auto',\n  },\n  menuButton: {\n    color: 'white'\n  },\n  nested: {\n    position: \"relative\",\n    left: 25\n  }\n});\n\nfunction ListItemLink(props) {\n  return <ListItem button component=\"a\" {...props} />;\n}\n\nexport default function TemporaryDrawer() {\n  const classes = useStyles();\n  const [state, setState] = React.useState({\n    left: false\n  });\n\n  const toggleDrawer = (anchor, open) => (event) => {\n    if (event.type === 'keydown' && (event.key === 'Tab' || event.key === 'Shift')) {\n      return;\n    }\n\n    setState({ ...state, [anchor]: open });\n  };\n\n  const list = (anchor) => (\n    <div\n      className={clsx(classes.list)}\n      role=\"presentation\"\n      onClick={toggleDrawer(anchor, true)}\n      onKeyDown={toggleDrawer(anchor, true)}\n    >\n      <List>\n        <ListItemLink button key={'Home'} href='/'><ListItemIcon><HomeIcon /></ListItemIcon><ListItemText primary={'Home'} /></ListItemLink>\n        <ListItemLink button key={'QuickSort'} href='/quickSort'><ListItemIcon><LooksOneIcon /></ListItemIcon><ListItemText primary={'QuickSort'} /></ListItemLink>\n        <ListItemLink button key={'HeapSort'} href='/heapSort'><ListItemIcon><LooksTwoIcon /></ListItemIcon><ListItemText primary={'HeapSort'} /></ListItemLink>\n        <ListItemLink button key={'InsertionSort'} href='/insertionSort'><ListItemIcon><LooksThreeIcon /></ListItemIcon><ListItemText primary={'InsertionSort'} /></ListItemLink>\n        <ListItemLink button key={'BubbleSort'} href='/bubbleSort'><ListItemIcon><LooksFourIcon /></ListItemIcon><ListItemText primary={'BubbleSort'} /></ListItemLink>\n      </List>\n    </div>\n  );\n\n  return (\n    <div>\n      {[''].map((anchor) => (\n        <React.Fragment key={anchor}>\n          <IconButton className={classes.menuButton} onClick={toggleDrawer(anchor, true)}>{anchor}<MenuIcon /></IconButton>\n          <Drawer anchor={anchor} open={state[anchor]} onClose={toggleDrawer(anchor, false)}>\n            {list(anchor)}\n          </Drawer>\n        </React.Fragment>\n      ))}\n    </div>\n  );\n}","import React from 'react';\nimport {makeStyles, MuiThemeProvider} from '@material-ui/core/styles';\nimport AppBar from '@material-ui/core/AppBar'\nimport Button from '@material-ui/core/Button'\n//import StyledButton from './styledbutton.js'\nimport Toolbar from '@material-ui/core/Toolbar'\n//import AboutUsMenuButton from './aboutus-menubutton.js'\nimport Grid from '@material-ui/core/Grid'\nimport Hidden from '@material-ui/core/Hidden';\nimport IconButton from '@material-ui/core/IconButton';\nimport { createMuiTheme } from '@material-ui/core/styles';\nimport Box from '@material-ui/core/Box';\nimport TemporaryDrawer from './../Components/sidenav.js'\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    position: 'relative',\n    height: \"80px\",\n    background: \"white\",\n    marginBottom: \"40px\"\n  },\n  menubar: {\n    backgroundColor: '#2C2C2C',\n    boxShadow: 'none',\n  },\n  divider: {\n    height: \"10px\",\n    background: \"#9A1E1E\"\n  },\n  logo: {\n    maxWidth: 70,\n    padding: \"20px 20px 20px 0\"\n  },\n  menu_button: {\n    color: 'white',\n    '&:hover': {\n      backgroundColor: 'transparent',\n      color: \"#1d7cdb\"\n   },\n    fontWeight: 'bold',\n    fontSize: 15,\n    height: 60,\n    marginLeft: theme.spacing(3),\n    marginRight: theme.spacing(3),\n  }\n}));\n\nconst theme = createMuiTheme({\n  breakpoints: {\n    values: {\n      xs: 0,\n      sm: 575,\n      md: 600,\n      lg: 925,\n      xl: 1200\n    }\n  }\n});\n\nconst Navbar = () => {\n  const classes = useStyles();\n\n  return (\n    <MuiThemeProvider theme={theme}>\n    <div>\n      <div className={classes.root}>\n        <AppBar elevation={0} className={classes.menubar}>\n          <Toolbar>\n            <Grid\n            container\n            direction=\"row\"\n            justify=\"flex-start\"\n            alignItems=\"center\"\n            >\n              <Hidden lgUp>\n              <IconButton edge=\"start\" color=\"white\" aria-label=\"menu\">\n                <Box position=\"absolute\" left={2}><TemporaryDrawer position=\"relative\" right={2}></TemporaryDrawer></Box>\n              </IconButton>\n              </Hidden>\n              <Hidden lgUp>\n                <Box mx=\"auto\" position=\"relative\" left={5}>\n                  <a href='/'><img src=\"./MBLogo.png\" alt=\"logo\" className={classes.logo} href='/' /></a>\n                </Box>\n              </Hidden>\n              <Hidden mdDown>\n              <a href='/'><img src=\"./MBLogo.png\" alt=\"logo\" className={classes.logo} href='/' /></a>\n                <Button className={classes.menu_button} color=\"inherit\" href='/'>HOME</Button>\n                <Button className={classes.menu_button} color=\"inherit\" href='/quickSort'>QuickSort</Button>\n                <Button className={classes.menu_button} color=\"inhereit\" href='/heapSort'>HeapSort</Button>\n                <Button className={classes.menu_button} color=\"inhereit\" href='/insertionSort'>InsertionSort</Button>\n                <Button className={classes.menu_button} color=\"inherit\" href='/bubbleSort'>BubbleSort</Button>\n              </Hidden>\n            </Grid>\n      </Toolbar>\n    </AppBar>\n    </div>\n  </div>\n  </MuiThemeProvider>\n  );\n}\n\nexport default Navbar;\n","import React from 'react';\nimport Navbar from './Components/navbar.js'\nimport Box from '@material-ui/core/Box';\nimport {makeStyles, ThemeProvider, createMuiTheme} from '@material-ui/core/styles';\nimport Hidden from '@material-ui/core/Hidden';\n\nexport default function Home() {\n\n    const theme = createMuiTheme({\n        breakpoints: {\n          values: {\n            xs: 0,\n            sm: 650,\n            md: 960,\n            lg: 1280,\n            xl: 1920\n          }\n        }\n      });\n\n    const useStyles = makeStyles(() => ({\n      container: {\n          width: \"90%\",\n          margin: \"auto\"\n      },\n      header: {\n        marginBottom: \"25px\"\n      },\n      innerContainer: {\n          width: \"850px\"\n      },\n      text: {\n          width: \"60%\",\n          fontSize: \"17.5px\",\n          fontFamily: \"Arial\",\n          [theme.breakpoints.down('xs')]: {\n            width: \"100%\"\n          }\n      },\n      separator: {\n        width: \"10%\",\n        [theme.breakpoints.down('xs')]: {\n            width: \"0%\"\n          }\n      },\n      image: {\n          width: \"40%\",\n          [theme.breakpoints.down('xs')]: {\n            width: \"100%\"\n          }\n      },\n      smallScreenImage: {\n          marginTop: \"25px\"\n      }\n    }));\n  \n    const classes = useStyles()\n  \n    return (\n        <div style={{margin: 0}}>\n        <Navbar />\n        <ThemeProvider theme={theme}>\n        <div className={classes.container}>\n            <Box display=\"flex\" width={\"100%\"} className={classes.header}>\n                <Box m=\"auto\" fontWeight=\"fontWeightBold\" fontSize=\"h3.fontSize\" fontFamily=\"Arial\" textAlign=\"center\">\n                Welcome to Mike's Sorting Visualizer!\n                </Box>\n            </Box>\n            <Box display=\"flex\" width={\"100%\"}>\n                <Box m=\"auto\" display=\"flex\" className={classes.innerContainer}>\n                    <Box className={classes.text} >\n                    Hello! My name is Mike Brauninger, and I'm a computer engineering major at UMass Amherst with a passion for programming. I wanted to take on a project that would allow me to build upon what I've learned through my coursework in a visual sense, and a sorting algorithm visualizer of this nature seemed like the perfect opportunity to do so.\n\n                    <br></br>\n                    <br></br>\n                    <br></br>\n\n                    To operate the visualizer, simply click on any of the sorting algorithms listed in the header of this page, choose a sorting speed, and then click the \"Sort\" button. To make the array size larger or smaller, make your brower wider or narrower and refresh the page. It is also worth noting that you must reset the array via the \"Reset\" button before you change speeds.\n                    \n                    <br></br>\n                    <br></br>\n                    <br></br>\n\n                    What makes this visualizer unique, in my opinion, is that it utilizes HTML Canvas as a means of achieving a dynamic animation interface. With this type of setup, I was capable of displaying the array index by index in a fashion that allowed me to fluidly show which elements are changing, and where. Thanks for visiting this project, and I hope you enjoy my work!\n                    </Box>\n                    <Box className={classes.separator}></Box>\n                    <Hidden xsDown>\n                        <Box className={classes.image}>\n                            <img src=\"./ProfilePicture.png\" alt=\"\" width={\"90%\"} />\n                        </Box>\n                    </Hidden>\n                </Box> \n            </Box>\n            <Hidden smUp>\n            <Box display=\"flex\" width={\"100%\"} className={classes.smallScreenImage}>\n                <Box m=\"auto\" textAlign=\"center\">\n                    <img src=\"./ProfilePicture.png\" alt=\"\" width={\"80%\"} />\n                </Box>\n            </Box>\n            </Hidden>\n        </div>\n        </ThemeProvider>\n        </div>\n    )\n  }","import React from 'react';\nimport Button from '@material-ui/core/Button';\nimport { makeStyles} from '@material-ui/core/styles';\n\nconst useStyles = makeStyles(() => ({\n    styled_button: {\n        borderRadius: \"0.5em\",\n        fontWeight: 'bold',\n        height: '50px',\n        width: '100px',\n        marginRight: '25px',\n        marginBottom: '25px',\n        backgroundColor: '#2C2C2C',\n        color: 'white',\n        '&:hover': {\n          backgroundColor: '#2C2C2C',\n          color: \"#1d7cdb\"\n       },\n    },\n  }));\n\nexport default function StyledButton(props) {\n  const classes = useStyles();\n\n  return (\n    <Button className={classes.styled_button} onClick={ props.function }>{props.text}</Button>\n  );\n}\n","import React, {Component} from 'react';\nimport {makeStyles, createMuiTheme} from '@material-ui/core/styles';\nimport Navbar from './Components/navbar.js'\nimport StyledButton from './Components/styledbutton.js'\nimport Typography from '@material-ui/core/Typography'\nimport Box from '@material-ui/core/Box';\nimport Radio from '@material-ui/core/Radio';\nimport RadioGroup from '@material-ui/core/RadioGroup';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport FormControl from '@material-ui/core/FormControl';\nimport { withStyles } from '@material-ui/core/styles';\n\nclass Canvas extends Component {\n\n  constructor() {\n    super();\n    this.RadioButtonsGroup = this.RadioButtonsGroup.bind(this)\n    this.FinalCanvas = this.FinalCanvas.bind(this)\n    this.randomIntFromRange = this.randomIntFromRange.bind(this);\n    this.initialize = this.initialize.bind(this);\n    this.placeIAndJ = this.placeIAndJ.bind(this);\n    this.switchElements = this.switchElements.bind(this);\n    this.returnIAndJ = this.returnIAndJ.bind(this);\n    this.partition = this.partition.bind(this);\n    this.animate = this.animate.bind(this);\n    this.start = this.start.bind(this);\n    this.pausePlay = this.pausePlay.bind(this);\n    this.reset = this.reset.bind(this);\n    this.canvasRef = React.createRef();\n    // width height, and color of index boxes\n    this.elementWidth = 25\n    this.elementHeight = 50\n    this.elementColor = \"#fff\"\n    this.sortedColor = \"#6089f7\"\n\n    this.elementArray = [] // list for our number elements\n\n    // element generator creates and adds box elements to list\n    this.yValue = 220 / 2 // y value location of boxes on canvas\n    this.x0Value = this.elementWidth // x value location of first box on canvas\n    this.sortedList = []\n    this.ijList = []\n    this.ijValueArray = null\n    this.arrayStack = null\n    this.iDistance = null\n    this.jDistance = null\n    this.iRunNumber = null\n    this.jRunNumber = null\n    this.speedFactor = 25\n    this.referenceNumber = 0 // final refresh number of whatever the previous state was, needed to determine when the next state finishes\n    this.number = 0 // current number of screen refreshes, used to determine when current state ends\n    this.sortState = \"calculatingDistance\" // first state that the program finds itself in\n    this.myReq = null\n    this.doAnim = false\n    this.firstPress = true\n    this.speedChosen = false\n    this.nextSpeed = null\n    this.sortingFinished = false\n  }\n\n  canvasState = {\n      canvasWidth: window.innerWidth * 0.9,\n      canvasHeight: 220\n  }\n\n  // Helper function: returns a random number in range of two given numbers\n  randomIntFromRange(num1, num2) {\n  var distance = num2 + 1 - num1\n  var randomDistanceBetween = Math.random() * distance\n  var number = Math.floor(num1 + randomDistanceBetween)\n  return number\n  }\n\n  initialize() {\n\n    this.elementArray = [] // list for our number elements\n\n    // element generator creates and adds box elements to list\n    this.sortedList = []\n    this.ijList = []\n    this.ijValueArray = null\n    this.arrayStack = null\n    this.iDistance = null\n    this.jDistance = null\n    this.iRunNumber = null\n    this.jRunNumber = null\n    this.referenceNumber = 0 // final refresh number of whatever the previous state was, needed to determine when the next state finishes\n    this.number = 0 // current number of screen refreshes, used to determine when current state ends\n    this.sortState = \"calculatingDistance\" // first state that the program finds itself in\n    this.myReq = null\n    this.doAnim = false\n    this.firstPress = true\n    this.sortingFinished = false\n\n    const canvas = this.canvasRef.current;\n    const c = canvas.getContext('2d');\n    c.fillStyle = \"#1d7cdb\";\n    c.clearRect(0, 0, window.innerWidth, window.innerHeight)\n    c.fillRect(0, 0, this.canvasState.canvasWidth, this.canvasState.canvasHeight);\n\n\n\n      // --------------------------------- Box class------------------------------------------------\n\n  // dimensions for list indices that will be visualized on the canvas\n  class Box {\n    constructor(x, y, width, height, value, color) {\n      this.x = x // x coordinate of upper left corner\n      this.y = y // y coordinate of upper left croner\n      this.width = width  // width of index box\n      this.height = height // height of index box\n      this.value = value  // value stored in index box\n      this.color = color // color of box\n    }\n\n    draw() { // method that draws boxes with a value stored inside\n      c.beginPath()\n      c.rect(this.x, this.y, this.width, this.height)\n      c.fillStyle = this.color\n      c.fill()\n      c.stroke()\n      c.closePath()\n      c.beginPath()\n      c.font = \"11px Arial\"\n      c.fillStyle = \"black\"\n      if (this.value === \"i\" || this.value === \"j\") {\n        c.fillText(this.value, this.x + 0.46 * this.width, this.y + 0.6 * this.height)\n      }\n      else if (this.value < 10) {\n        c.fillText(this.value, this.x + 0.39 * this.width, this.y + 0.6 * this.height)\n      }\n      else if (10 <= this.value && this.value < 100) {\n        c.fillText(this.value, this.x + 0.26 * this.width, this.y + 0.6 * this.height)\n      }\n      else {\n        c.fillText(this.value, this.x + 0.125 * this.width, this.y + 0.6 * this.height)\n      }\n      c.fill()\n      c.closePath()\n    }\n\n    updateX(dx, direction) { // updates the x value of a box for next screen refresh by dx pixels\n      if (direction === \"left\") {\n        this.x -= dx\n      }\n      if (direction === \"right\") {\n        this.x += dx\n      }\n    }\n\n    updateY(dy, direction) { // updates the x value of a box for next screen refresh by dy pixels\n      if (direction === \"up\") {\n        this.y -= dy\n      }\n      if (direction === \"down\") {\n        this.y += dy\n      }\n    }\n  }\n\n  // -------------------------------------------------------------------------------------------\n\n  // ---------------------------- functions to be used in main program -------------------------\n\n  // Funtion that initializes the visual elements and what will be working behind the scenes\n\n    var i = 0\n    while (i * this.elementWidth < canvas.width - (3 * this.elementWidth)) {\n      let xValue = this.x0Value + this.elementWidth * i // so boxes will be placed immediately next to each other\n      let listElement = new Box(xValue, this.yValue, this.elementWidth, this.elementHeight, this.randomIntFromRange(1, 999), this.elementColor)\n      this.elementArray.push(listElement)\n      this.sortedList.push(\"NS\")\n      i += 1\n    }\n\n    // i and j boxes are created\n    this.ijList.push(new Box(this.x0Value, this.yValue + this.elementHeight, this.elementWidth, this.elementHeight, \"i\", this.elementColor))\n    this.ijList.push(new Box(this.elementArray[this.elementArray.length - 1].x, this.yValue + this.elementHeight, this.elementWidth, this.elementHeight, \"j\", this.elementColor))\n\n    this.ijValueArray = [0, this.elementArray.length - 1] // contains current positions of i and j, index 0 is i, index 1 is j\n    this.arrayStack = [this.elementArray] // sub-arrays will be placed in here to be sorted in the future\n\n    for (i in this.elementArray) {\n      this.elementArray[i].draw()\n    }\n    for (i in this.ijList) {\n      this.ijList[i].draw()\n    }\n    cancelAnimationFrame(this.myReq)\n    return\n    }\n\n    placeIAndJ(array, speedFactor, oldNumber, number) {\n      var initialIValue = this.ijValueArray[0] // initial i and j values are taken as variables\n      var initialJValue = this.ijValueArray[1]\n      if (this.sortState === \"calculatingDistance\") { // program begins in this state... distances to appropriate i and j indices are calculated\n        for (var i = initialIValue; i < initialIValue + array.length; i++) {\n          if (this.elementArray[i].value > array[0].value) { // distance to i index is found (where i index value > pivot value)\n            this.iDistance = i - initialIValue\n            break\n          }\n          if (i === initialIValue + array.length - 1) { // for case where i index is on last array element\n            this.iDistance = array.length - 1\n          }\n        }\n        for (var j = initialJValue; j >= initialJValue - array.length + 1; j--) {\n          if (this.elementArray[j].value <= array[0].value) { // distance to j index is found (where j index value <= pivot value)\n            this.jDistance = initialJValue - j\n            break\n          }\n        }\n        this.sortState = \"movingIAndJ\" // the behind the scenes work is done for this function, now the animation state is entered which uses the distances calculated above\n      }\n      if (oldNumber === 0) { // for the first animation state of the program\n        // rise and runNumbers in this program are calculated by the number of screen refreshes it takes for the element to get to where it needs to be at the \"speed\" it is travelling at (pixels moved per screen refresh) \n        var iRunNumber = oldNumber + (this.elementWidth * this.iDistance / speedFactor)\n        var jRunNumber = oldNumber + (this.elementWidth * this.jDistance / speedFactor)\n      }\n      else { // all other states of the program must account for number's (the variable) incrementation with each call to animate() later in the program\n        iRunNumber = oldNumber + (this.elementWidth * this.iDistance / speedFactor) + 1\n        jRunNumber = oldNumber + (this.elementWidth * this.jDistance / speedFactor) + 1\n      }\n      if (this.iDistance >= this.jDistance) { // the end of the state will be signaled by when i or j finishes travelling (whichever one has to travel farther)\n        var endNumber = iRunNumber\n      }\n      else {\n        endNumber = jRunNumber\n      }\n      if (number < iRunNumber) {\n        this.ijList[0].updateX(speedFactor, \"right\") // i moves right until it finds its position\n      }\n      if (number < jRunNumber) {\n        this.ijList[1].updateX(speedFactor, \"left\") // j moves left until it fnds its position\n      }\n      // i and j values are incremented based upon their direction every time they pass an element\n      if (this.ijList[0].x % this.elementWidth === 0 && number < iRunNumber) {\n        this.ijValueArray[0] += 1\n      }\n      if (this.ijList[1].x % this.elementWidth === 0 && number < jRunNumber) {\n        this.ijValueArray[1] -= 1\n      }\n      if (number === endNumber) {\n        this.referenceNumber = number // reference number takes on value of current refresh number\n        if (this.ijValueArray[0] < this.ijValueArray[1]) {\n          this.sortState = \"switching\" // state to switch i and j elements\n        }\n        else {\n          this.sortState = \"sortingSwitch\" // state to switch j and pivot elements\n        }\n      }\n    }\n\n    switchElements(array, speedFactor, oldNumber, number) {\n      // left and right elements are selected based upon state\n      if (this.sortState === \"switching\") {\n        var leftElement = this.elementArray[this.ijValueArray[0]]\n        var rightElement = this.elementArray[this.ijValueArray[1]]\n      }\n      if (this.sortState === \"sortingSwitch\") {\n        leftElement = array[0]\n        rightElement = this.elementArray[this.ijValueArray[1]]\n      }\n      var distance = this.elementArray.indexOf(rightElement) - this.elementArray.indexOf(leftElement) // number of elements each element must travel across\n      var riseNumber = oldNumber + (this.elementHeight / speedFactor) + 1 // number that signals the end of the rising phase of the animation\n      var runNumber = riseNumber + (this.elementWidth * distance / speedFactor) + 1 // number that signals the end of the running phase of the animation\n      var dropNumber = runNumber + (this.elementHeight / speedFactor) + 1 // number that signals the end of the dropping phase of the animation\n      if (distance === 0) { // when no switching animation is needed\n        riseNumber = oldNumber + 1\n        runNumber = oldNumber + 1\n        dropNumber = oldNumber + 1\n      }\n      if (number < riseNumber) { // rising phase of the switching animation\n        leftElement.updateY(speedFactor, \"up\")\n        rightElement.updateY(2 * speedFactor, \"up\") // right element rises above left\n      }\n      if (number > riseNumber && number < runNumber) { // running phase of the switching animation\n        leftElement.updateX(speedFactor, \"right\")\n        rightElement.updateX(speedFactor, \"left\")\n      }\n      if (number > runNumber && number < dropNumber) { // dropping phase of the animation\n        leftElement.updateY(speedFactor, \"down\")\n        rightElement.updateY(2 * speedFactor, \"down\") // because right was above left\n      }\n      if (number === dropNumber) { // once animation is finished, the element values are switched behind the scenes\n        var temp1 = rightElement\n        var temp2 = leftElement\n        leftElement = temp1 // leftElement variable is changed to new left element\n        rightElement = temp2 // rightElement variable is changed to new right element\n        this.elementArray[this.elementArray.indexOf(temp1)] = temp2\n        this.elementArray[this.elementArray.indexOf(temp2)] = temp1\n        array[array.indexOf(temp1)] = temp2\n        array[array.indexOf(temp2)] = temp1\n        this.referenceNumber = number // reference number takes on value of current refresh number\n        if (this.sortState === \"switching\") {\n          this.sortState = \"calculatingDistance\" // goes back to find index of next i and j values\n        }\n        else {\n          if (array.length === 2) { // both elements are sorted and no splicing needs to occur\n            array[0].color = this.sortedColor // array[0] and array[1] are used here because rightElement could equal leftElement\n            this.sortedList[this.elementArray.indexOf(array[0])] = \"S\"\n            array[1].color = this.sortedColor\n            this.sortedList[this.elementArray.indexOf(array[1])] = \"S\"\n            this.arrayStack.splice(0, 1)\n          }\n          else {\n            var arrayDuplicate = [...array] // duplicate array that will be mutated to get sub-array\n            if (array.indexOf(rightElement) === 0) { // if the leftmost element gets sorted by not moving\n              this.sortedList[this.elementArray.indexOf(leftElement)] = \"S\"\n              rightElement.color = this.sortedColor\n              this.arrayStack[0] = arrayDuplicate.splice(1, arrayDuplicate.length - 1)\n            }\n            else if (array.indexOf(rightElement) === 1 && array.indexOf(rightElement) === array.length - 2) {\n              this.sortedList[this.elementArray.indexOf(rightElement)] = \"S\"\n              rightElement.color = this.sortedColor\n              this.sortedList[this.elementArray.indexOf(rightElement) - 1] = \"S\"\n              this.elementArray[this.elementArray.indexOf(rightElement) - 1].color = this.sortedColor\n              this.sortedList[this.elementArray.indexOf(rightElement) + 1] = \"S\"\n              this.elementArray[this.elementArray.indexOf(rightElement) + 1].color = this.sortedColor\n              this.arrayStack.splice(0, 1)\n            }\n            else if (array.indexOf(rightElement) === 1) { // if the element to the right of the leftmost element gets sorted\n              this.sortedList[this.elementArray.indexOf(rightElement)] = \"S\"\n              rightElement.color = this.sortedColor\n              this.sortedList[this.elementArray.indexOf(rightElement) - 1] = \"S\"\n              this.elementArray[this.elementArray.indexOf(rightElement) - 1].color = this.sortedColor\n              this.arrayStack[0] = arrayDuplicate.splice(2, arrayDuplicate.length - 2)\n            }\n            else if (array.indexOf(rightElement) === array.length - 1) { // if the rightmost element gets sorted\n              this.sortedList[this.elementArray.indexOf(rightElement)] = \"S\"\n              rightElement.color = this.sortedColor\n              this.arrayStack[0] = arrayDuplicate.splice(0, arrayDuplicate.length - 1)\n            }\n            else if (array.indexOf(rightElement) === array.length - 2) { // if the element to the left of the rightmost element gets sorted\n              this.sortedList[this.elementArray.indexOf(rightElement)] = \"S\"\n              rightElement.color = this.sortedColor\n              this.sortedList[this.elementArray.indexOf(rightElement) + 1] = \"S\"\n              this.elementArray[this.elementArray.indexOf(rightElement) + 1].color = this.sortedColor\n              this.arrayStack[0] = arrayDuplicate.splice(0, arrayDuplicate.length - 2)\n            }\n            else { // if a middle element gets sorted and breaks into two sublists\n              this.sortedList[this.elementArray.indexOf(rightElement)] = \"S\"\n              rightElement.color = this.sortedColor\n              var leftList = arrayDuplicate.splice(0, arrayDuplicate.indexOf(this.elementArray[this.ijValueArray[1]]))\n              var rightList = arrayDuplicate.splice(1, arrayDuplicate.length)\n              this.arrayStack[0] = leftList\n              this.arrayStack.splice(1, 0, rightList)\n            }\n          }\n          this.sortState = \"resetIAndJ\" // once this state finishes, i and j must reset themselves for the new array they will be working on\n        }\n      }\n    }\n\n    returnIAndJ(array, speedFactor, oldNumber, number) {\n      if (number === oldNumber + 1) { // conditional is applied so distances are not continually calculated, which will mess up the program\n        this.iDistance = this.elementArray.indexOf(array[0]) - this.ijValueArray[0]\n        this.jDistance = this.elementArray.indexOf(array[array.length - 1]) - this.ijValueArray[1]\n      }\n      if (this.iDistance && this.jDistance < 0) { // if i and j must travel left\n        this.iRunNumber = oldNumber + (this.elementWidth * (this.iDistance * -1) / speedFactor) + 1\n        this.jRunNumber = oldNumber + (this.elementWidth * (this.jDistance * -1) / speedFactor) + 1\n      }\n      else { // if i and j must travel right\n        this.iRunNumber = oldNumber + (this.elementWidth * this.iDistance / speedFactor) + 1\n        this.jRunNumber = oldNumber + (this.elementWidth * this.jDistance / speedFactor) + 1\n      }\n      if (Math.abs(this.iDistance) >= Math.abs(this.jDistance)) { // end of state is triggered by whichever block has to travel farther\n        var endNumber = this.iRunNumber\n      }\n      else {\n        endNumber = this.jRunNumber\n      }\n      if (this.iDistance < 0 && this.jDistance < 0) { // when i and j must travel left\n        if (number < this.iRunNumber) {\n          this.ijList[0].updateX(speedFactor, \"left\")\n        }\n        if (number < this.jRunNumber) {\n          this.ijList[1].updateX(speedFactor, \"left\")\n        }\n        if (number % (this.elementWidth / speedFactor) === 0 && number < this.iRunNumber) { // i and j values are incremented whenever they pass an element\n          this.ijValueArray[0] -= 1\n        }\n        if (number % (this.elementWidth / speedFactor) === 0 && number < this.jRunNumber) {\n          this.ijValueArray[1] -= 1\n        }\n      }\n      else { // when i and j must travel right\n        if (number < this.iRunNumber) {\n          this.ijList[0].updateX(speedFactor, \"right\")\n        }\n        if (number < this.jRunNumber) {\n          this.ijList[1].updateX(speedFactor, \"right\")\n        }\n        if (number % (this.elementWidth / speedFactor) === 0 && number < this.iRunNumber) { // i and j values are incremented whenever they pass an element\n          this.ijValueArray[0] += 1\n        }\n        if (number % (this.elementWidth / speedFactor) === 0 && number < this.jRunNumber) {\n          this.ijValueArray[1] += 1\n        }\n      }\n      if (number === endNumber) {\n        this.referenceNumber = number // reference number takes on value of current refresh number\n        this.sortState = \"calculatingDistance\" // now ready to back to the first state, with the only difference being that the list the program is working with is smaller now\n      }\n    }\n\n    partition(array, oldNumber, number, speedFactor) { // implementation of three above functions\n      array[0].color = \"#E0B0FF\"\n      if (this.sortState === \"movingIAndJ\" || this.sortState === \"calculatingDistance\") {\n        this.placeIAndJ(array, speedFactor, oldNumber, number)\n      }\n      else if (this.sortState === \"switching\" || this.sortState === \"sortingSwitch\") {\n        this.switchElements(array, speedFactor, oldNumber, number)\n      }\n      else if (this.sortState === \"resetIAndJ\") {\n        this.returnIAndJ(array, speedFactor, oldNumber, number)\n      }\n    }\n    \n    animate() { // refreshes and draws canvas\n      if (!this.doAnim) {\n        cancelAnimationFrame(this.myReq)\n        return\n      }\n      const canvas = this.canvasRef.current;\n      const c = canvas.getContext('2d');\n      requestAnimationFrame(this.animate)\n      c.clearRect(0, 0, window.innerWidth, window.innerHeight)\n      c.fillStyle = \"#1d7cdb\";\n      c.fillRect(0, 0, window.innerWidth, window.innerHeight);\n      for (var i in this.elementArray) {\n        this.elementArray[i].draw()\n      }\n      for (i in this.ijList) {\n        this.ijList[i].draw()\n      }\n      if (this.arrayStack.length !== 0) {\n        this.partition(this.arrayStack[0], this.referenceNumber, this.number, this.speedFactor)\n      }\n      else {\n          cancelAnimationFrame(this.myReq)\n          this.sortingFinished = true\n          return\n      }\n      this.number += 1\n    }\n\n    start() {\n      if (!this.speedChosen) {\n        window.alert(\"Please choose a sorting speed.\")\n        return\n      }\n      if (this.firstPress) {\n        this.doAnim = true\n        this.speedFactor = this.nextSpeed\n        this.myReq = this.animate()\n        this.firstPress = false\n      }\n    }\n\n    pausePlay() {\n      if (!this.firstPress) {\n        this.doAnim = !this.doAnim\n        if (this.doAnim) {\n          this.myReq = this.animate()\n        }\n      }\n    }\n\n    reset() {\n\n      this.initialize()\n\n      this.firstPress = true\n\n    }\n\n    RadioButtonsGroup() {\n\n      const useStyles = makeStyles(() => ({\n        radioButtons: {\n            position: \"relative\",\n            top: \"10px\",\n            left: \"3px\",\n            display: \"block\"\n        }\n      }));\n\n      const classes = useStyles()\n\n      const BlueRadio = withStyles({\n          root: {\n            '&$checked': {\n              color: \"#1d7cdb\",\n            },\n          },\n          checked: {},\n        })((props) => <Radio color=\"default\" {...props} />);\n  \n      const [value, setValue] = React.useState(null);\n  \n      const handleChange = (event) => {\n          setValue(event.target.value);\n          this.nextSpeed = Number(event.target.value)\n          if (this.firstPress) {\n            this.speedFactor = Number(event.target.value)\n            this.speedChosen = true\n          }\n          if (!this.firstPress && !this.sortingFinished) {\n            window.alert('Please reset in order to switch speeds.')\n          }\n      };\n  \n      return (\n          <FormControl component=\"fieldset\">\n          <RadioGroup row aria-label=\"speeds\" name=\"speed1\" value={value} onChange={handleChange} className={classes.radioButtons}>\n              <FormControlLabel value=\"25\" control={<BlueRadio />} label=\"Fast\" />\n              <FormControlLabel value=\"12.5\" control={<BlueRadio />} label=\"Medium\" />\n              <FormControlLabel value=\"6.25\" control={<BlueRadio />} label=\"Slow\" />\n              <FormControlLabel value=\"3.125\" control={<BlueRadio />} label=\"Very Slow\" />\n          </RadioGroup>\n          \n          </FormControl>\n      );\n  }\n\n  FinalCanvas() {\n    const useStyles = makeStyles(() => ({\n      buttons: {\n          position: \"relative\",\n          top: \"20px\"\n      },\n      canvas: {\n        display: \"block\"\n      }\n    }));\n\n    const classes = useStyles()\n\n      return (\n          <div>\n              <canvas ref={this.canvasRef} width={this.canvasState.canvasWidth} height={this.canvasState.canvasHeight} className={classes.canvas}/>\n              <this.RadioButtonsGroup />\n              <Box className={classes.buttons}>\n              <StyledButton id=\"action_button\" text=\"Sort\" function={this.start}></StyledButton>\n              <StyledButton id=\"action_button\" text=\"Pause\" function={this.pausePlay}></StyledButton>\n              <StyledButton id=\"action_button\" text=\"Reset\" function={this.reset}></StyledButton>\n              </Box>\n          </div>\n      );\n  }\n\n    componentDidMount() {\n      this.initialize()\n    }\n\n  \n\n  render() {\n    return(<this.FinalCanvas/>)\n  }\n}\n\nfunction QuickSort() {\n\n  const theme = createMuiTheme();\n\n  const useStyles = makeStyles(() => ({\n    container: {\n        width: \"91.5%\",\n        margin: \"auto\",\n\n      },\n    canvas: {\n      marginBottom: \"15px\",\n      marginTop: \"10px\"\n    },\n    key: {\n      width: \"455px\",\n      height: \"200px\",\n      [theme.breakpoints.down('xs')]: {\n        height: \"300px\",\n        width: \"100px\"\n      },\n      borderColor: 'text.primary'\n    },\n    unsorted: {\n      width: \"25px\",\n      height: \"50px\",\n      borderColor: 'text.primary',\n      display: \"inline-block\",\n      position: \"relative\",\n      top: \"10px\",\n      //left: \"20px\"\n    },\n    pivot: {\n      width: \"25px\",\n      height: \"50px\",\n      backgroundColor: \"#E0B0FF\",\n      borderColor: 'text.primary',\n      display: \"inline-block\",\n      position: \"relative\",\n      left: \"205px\",\n      [theme.breakpoints.down('xs')]: {\n        left: \"-27px\",\n        top: \"230px\",\n      },\n      top: \"10px\"\n    },\n    sorted: {\n      width: \"25px\",\n      height: \"50px\",\n      backgroundColor: \"#6089f7\",\n      borderColor: 'text.primary',\n      display: \"inline-block\",\n      position: \"relative\",\n      top: \"120px\",\n      right: \"54px\"\n    },\n    label: {\n      position: \"absolute\",\n      top: \"10px\",\n      left: \"40px\",\n      width: \"200px\",\n      fontSize: \"20px\"\n    }\n  }));\n    \n    const classes = useStyles()\n\n  return (\n    <div style={{margin: 0}}>\n      <header className=\"App-header\"></header>\n\n      <Navbar/>\n      <div className={classes.container}>\n      <Box fontWeight=\"fontWeightBold\" fontSize=\"h3.fontSize\" fontFamily=\"Arial\">QuickSort</Box>\n        <div className={classes.canvas}><Canvas/></div>\n        <Box className={classes.key}>\n          <Box className={classes.unsorted} border={1}><Typography className={classes.label}>Unsorted Element</Typography></Box>\n          <Box className={classes.pivot} border={1}><Typography className={classes.label}>Current Pivot</Typography></Box>\n          <Box className={classes.sorted} border={1}><Typography className={classes.label}>Sorted Element</Typography></Box>\n        </Box>\n        \n      </div>\n    </div>\n\n  );\n}\n\nexport default QuickSort;","import React, {Component} from 'react';\nimport {makeStyles, createMuiTheme} from '@material-ui/core/styles';\nimport Navbar from './Components/navbar.js'\nimport StyledButton from './Components/styledbutton.js'\nimport Typography from '@material-ui/core/Typography'\nimport Box from '@material-ui/core/Box';\nimport Radio from '@material-ui/core/Radio';\nimport RadioGroup from '@material-ui/core/RadioGroup';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport FormControl from '@material-ui/core/FormControl';\nimport { withStyles } from '@material-ui/core/styles';\n\nclass Canvas extends Component {\n\n  constructor() {\n    super();\n    this.RadioButtonsGroup = this.RadioButtonsGroup.bind(this)\n    this.FinalCanvas = this.FinalCanvas.bind(this)\n    this.randomIntFromRange = this.randomIntFromRange.bind(this);\n    this.initialize = this.initialize.bind(this);\n    this.moveIAndJ = this.moveIAndJ.bind(this);\n    this.switchElements = this.switchElements.bind(this);\n    this.returnIAndJ = this.returnIAndJ.bind(this);\n    this.finishRun = this.finishRun.bind(this);\n    this.partition = this.partition.bind(this);\n    this.animate = this.animate.bind(this);\n    this.start = this.start.bind(this);\n    this.pausePlay = this.pausePlay.bind(this);\n    this.reset = this.reset.bind(this);\n    this.canvasRef = React.createRef();\n    // width height, and color of index boxes\n    this.elementWidth = 25\n    this.elementHeight = 50\n    this.elementColor = \"#fff\"\n    this.sortedColor = \"#6089f7\"\n    this.transitionColor = \"#E0B0FF\"\n\n    this.elementArray = [] // list for our number elements\n\n    // element generator creates and adds box elements to list\n    this.yValue = 220 / 2 // y value location of boxes on canvas\n    this.x0Value = this.elementWidth // x value location of first box on canvas\n    this.sortedList = []\n    this.ijList = []\n    this.ijValueArray = null\n    this.arrayStack = null\n    this.distance = null\n    this.iDistance = null\n    this.jDistance = null\n    this.iRunNumber = null\n    this.jRunNumber = null\n    this.speedFactor = 25\n    this.referenceNumber = 0 // final refresh number of whatever the previous state was, needed to determine when the next state finishes\n    this.number = 0 // current number of screen refreshes, used to determine when current state ends\n    this.sortState = \"calculatingDistance\" // first state that the program finds itself in\n    this.myReq = null\n    this.doAnim = false\n    this.firstPress = true\n    this.speedChosen = false\n    this.nextSpeed = null\n    this.sortingFinished = false\n    this.sorted = false\n    this.jPlus1Reference = null\n  }\n\n  canvasState = {\n      canvasWidth: window.innerWidth * 0.9,\n      canvasHeight: 220\n  }\n\n  // Helper function: returns a random number in range of two given numbers\n  randomIntFromRange(num1, num2) {\n  var distance = num2 + 1 - num1\n  var randomDistanceBetween = Math.random() * distance\n  var number = Math.floor(num1 + randomDistanceBetween)\n  return number\n  }\n\n  initialize() {\n\n    this.elementArray = [] // list for our number elements\n\n    // element generator creates and adds box elements to list\n    this.sortedList = []\n    this.ijList = []\n    this.ijValueArray = null\n    this.arrayStack = null\n    this.distance = null\n    this.iDistance = null\n    this.jDistance = null\n    this.iRunNumber = null\n    this.jRunNumber = null\n    this.referenceNumber = 0 // final refresh number of whatever the previous state was, needed to determine when the next state finishes\n    this.number = 0 // current number of screen refreshes, used to determine when current state ends\n    this.sortState = \"calculatingDistance\" // first state that the program finds itself in\n    this.myReq = null\n    this.doAnim = false\n    this.firstPress = true\n    this.sortingFinished = false\n    this.sorted = false\n    this.jPlus1Reference = null\n\n    const canvas = this.canvasRef.current;\n    const c = canvas.getContext('2d');\n    c.fillStyle = \"#1d7cdb\";\n    c.clearRect(0, 0, window.innerWidth, window.innerHeight)\n    c.fillRect(0, 0, this.canvasState.canvasWidth, this.canvasState.canvasHeight);\n\n\n\n      // --------------------------------- Box class------------------------------------------------\n\n  // dimensions for list indices that will be visualized on the canvas\n  class Box {\n    constructor(x, y, width, height, value, color) {\n      this.x = x // x coordinate of upper left corner\n      this.y = y // y coordinate of upper left croner\n      this.width = width  // width of index box\n      this.height = height // height of index box\n      this.value = value  // value stored in index box\n      this.color = color // color of box\n    }\n\n    draw() { // method that draws boxes with a value stored inside\n      c.beginPath()\n      c.rect(this.x, this.y, this.width, this.height)\n      c.fillStyle = this.color\n      c.fill()\n      c.stroke()\n      c.closePath()\n      c.beginPath()\n      c.font = \"11px Arial\"\n      c.fillStyle = \"black\"\n      if (this.value === \"i\" || this.value === \"j\") {\n        c.fillText(this.value, this.x + 0.46 * this.width, this.y + 0.6 * this.height)\n      }\n      else if (this.value < 10) {\n        c.fillText(this.value, this.x + 0.39 * this.width, this.y + 0.6 * this.height)\n      }\n      else if (10 <= this.value && this.value < 100) {\n        c.fillText(this.value, this.x + 0.26 * this.width, this.y + 0.6 * this.height)\n      }\n      else {\n        c.fillText(this.value, this.x + 0.125 * this.width, this.y + 0.6 * this.height)\n      }\n      c.fill()\n      c.closePath()\n    }\n\n    updateX(dx, direction) { // updates the x value of a box for next screen refresh by dx pixels\n      if (direction === \"left\") {\n        this.x -= dx\n      }\n      if (direction === \"right\") {\n        this.x += dx\n      }\n    }\n\n    updateY(dy, direction) { // updates the x value of a box for next screen refresh by dy pixels\n      if (direction === \"up\") {\n        this.y -= dy\n      }\n      if (direction === \"down\") {\n        this.y += dy\n      }\n    }\n  }\n\n  // -------------------------------------------------------------------------------------------\n\n  // ---------------------------- functions to be used in main program -------------------------\n\n  // Funtion that initializes the visual elements and what will be working behind the scenes\n/*\n  var testArray = [1, 2, 3, 4, 5, 6, 8, 7, 9, 10, 11, 12, 13]\n  for (var i in testArray) {\n    let xValue = this.x0Value + this.elementWidth * i // so boxes will be placed immediately next to each other\n      let listElement = new Box(xValue, this.yValue, this.elementWidth, this.elementHeight, testArray[i], this.elementColor)\n      this.elementArray.push(listElement)\n      this.sortedList.push(\"NS\")\n  }\n*/\n\n    var i = 0\n    while (i * this.elementWidth < canvas.width - (3 * this.elementWidth)) {\n      let xValue = this.x0Value + this.elementWidth * i // so boxes will be placed immediately next to each other\n      let listElement = new Box(xValue, this.yValue, this.elementWidth, this.elementHeight, this.randomIntFromRange(1, 999), this.elementColor)\n      this.elementArray.push(listElement)\n      this.sortedList.push(\"NS\")\n      i += 1\n    }\n    // i and j boxes are created\n    this.ijList.push(new Box(this.x0Value, this.yValue + this.elementHeight, this.elementWidth, this.elementHeight, \"i\", this.elementColor))\n    this.ijList.push(new Box(2 * this.x0Value, this.yValue + this.elementHeight, this.elementWidth, this.elementHeight, \"j\", this.elementColor))\n\n    this.ijValueArray = [0, 1] // contains current positions of i and j, index 0 is i, index 1 is j\n    this.arrayStack = [this.elementArray] // sub-arrays will be placed in here to be sorted in the future\n\n    for (i in this.elementArray) {\n      this.elementArray[i].draw()\n    }\n    for (i in this.ijList) {\n      this.ijList[i].draw()\n    }\n    cancelAnimationFrame(this.myReq)\n    return\n    }\n\n    moveIAndJ(speedFactor, oldNumber, number) {\n      var initialIValue = this.ijValueArray[0] // initial i and j values are taken as variables\n      var initialJValue = this.ijValueArray[1]\n      if (this.sortState === \"calculatingDistance\") {\n          this.distance = 0\n          while (true) {\n              if (initialJValue + this.distance === this.elementArray.length - 1) {\n                  break\n              }\n              if (this.elementArray[initialIValue + this.distance].value <= this.elementArray[initialJValue + this.distance].value) {\n                this.distance += 1\n              }\n              else {\n                  break\n              }\n\n              for (var i in this.elementArray) {\n                  if (this.elementArray[i].value > this.elementArray[Number(i) + 1].value) {\n                      break\n                  }\n                  if (i == this.elementArray.length - 2) {\n                      if (this.elementArray[i].value <= this.elementArray[Number(i) + 1].value) {\n                          this.sorted = true\n                          break\n                      }\n                  }\n              }\n          }\n          if (this.sorted === true) {\n            this.distance = 0\n            i = 0\n            while (this.elementArray[i].color === this.elementColor) {\n              this.distance += 1\n              i += 1\n              if (i < this.elementArray.length) {\n                break\n              }\n            }\n          }\n          this.sortState = \"movingIAndJ\"\n      }\n      if (this.sortState === \"movingIAndJ\") {\n          if (oldNumber === 0) { // for the first animation state of the program\n              // rise and runNumbers in this program are calculated by the number of screen refreshes it takes for the element to get to where it needs to be at the \"speed\" it is travelling at (pixels moved per screen refresh) \n              var runNumber = oldNumber + (this.elementWidth * this.distance / speedFactor)\n          }\n          else { // all other states of the program must account for number's (the variable) incrementation with each call to animate() later in the program\n              runNumber = oldNumber + (this.elementWidth * this.distance / speedFactor) + 1\n          }\n          // rise and runNumbers in this program are calculated by the number of screen refreshes it takes for the element to get to where it needs to be at the \"speed\" it is travelling at (pixels moved per screen refresh)\n          if (number < runNumber) {\n            this.ijList[0].updateX(speedFactor, \"right\") // i moves right until it finds its position\n            this.ijList[1].updateX(speedFactor, \"right\") // j moves left until it fnds its position\n          }\n          // i and j values are incremented based upon their direction every time they pass an element\n          if (this.ijList[0].x % this.elementWidth === 0 && number < runNumber) {\n            this.ijValueArray[0] += 1\n            this.ijValueArray[1] += 1\n          }\n          if (number === runNumber) {\n            this.referenceNumber = number // reference number takes on value of current refresh number\n            if (!this.sorted) {\n              this.sortState = \"switching\"\n            }\n            else {\n              this.sortState = \"done\"\n              this.sortingFinished = true\n            }\n          }\n      }\n    }\n\n    switchElements(speedFactor, oldNumber, number) {\n      var leftElement = this.elementArray[this.ijValueArray[0]]\n      leftElement.color = this.transitionColor\n      var rightElement = this.elementArray[this.ijValueArray[1]]\n      var distance = this.elementArray.indexOf(rightElement) - this.elementArray.indexOf(leftElement) // number of elements each element must travel across\n      var riseNumber = oldNumber + (this.elementHeight / speedFactor) + 1 // number that signals the end of the rising phase of the animation\n      var runNumber = riseNumber + (this.elementWidth * distance / speedFactor) + 1 // number that signals the end of the running phase of the animation\n      var dropNumber = runNumber + (this.elementHeight / speedFactor) + 1 // number that signals the end of the dropping phase of the animation\n      if (leftElement.value <= rightElement.value) { // when no switching animation is needed\n        riseNumber = oldNumber + 1\n        runNumber = oldNumber + 1\n        dropNumber = oldNumber + 1\n        this.sortState = \"resetIAndJ\"\n        return\n      }\n      if (number < riseNumber) { // rising phase of the switching animation\n        leftElement.updateY(speedFactor, \"up\")\n        rightElement.updateY(2 * speedFactor, \"up\") // right element rises above left\n      }\n      if (number > riseNumber && number < runNumber) { // running phase of the switching animation\n        leftElement.updateX(speedFactor, \"right\")\n        rightElement.updateX(speedFactor, \"left\")\n      }\n      if (number > runNumber && number < dropNumber) { // dropping phase of the animation\n        leftElement.updateY(speedFactor, \"down\")\n        rightElement.updateY(2 * speedFactor, \"down\") // because right was above left\n      }\n      if (number === dropNumber) { // once animation is finished, the element values are switched behind the scenes\n        var temp1 = rightElement\n        var temp2 = leftElement\n        leftElement = temp1 // leftElement variable is changed to new left element\n        rightElement = temp2 // rightElement variable is changed to new right element\n        this.elementArray[this.elementArray.indexOf(temp1)] = temp2\n        this.elementArray[this.elementArray.indexOf(temp2)] = temp1\n        rightElement.color = \"#fff\"\n        for (var i = this.ijValueArray[0]; i < this.elementArray.length; i++) {\n            if (this.elementArray[i].value > this.elementArray[Number(i) + 1].value) {\n                break\n            }\n            if (i === this.elementArray.length - 2) {\n              this.elementArray[this.ijValueArray[1]].color = this.sortedColor\n                if (this.elementArray[i].value <= this.elementArray[Number(i) + 1].value) {\n                  this.referenceNumber = number // reference number takes on value of current refresh number\n                    this.sortState = \"finishRun1\"\n                    return\n                }\n            }\n        }\n        this.referenceNumber = number // reference number takes on value of current refresh number\n        this.sortState = \"calculatingDistance\" // goes back to find index of next i and j values\n      }\n    }\n\n    returnIAndJ() {\n      this.ijValueArray[0] = 0\n      this.ijValueArray[1] = 1\n      this.ijList[0].x = this.x0Value\n      this.ijList[1].x = 2 * this.x0Value\n      this.referenceNumber = this.number\n      this.sortState = \"calculatingDistance\"\n    }\n\n    finishRun(speedFactor, oldNumber, number) {\n      if (this.sortState === \"finishRun1\") {\n        this.distance = 0\n        var j = this.ijValueArray[1] + 1\n        this.jPlus1Reference = j\n        if (this.jPlus1Reference < this.elementArray.length) {\n          while (this.elementArray[j].color === this.elementColor) {\n            this.distance += 1\n            j += 1\n            if (j === this.elementArray.length - 1 || j === this.elementArray.length) {\n              break\n            }\n          }\n        }\n        this.sortState = \"finishRun2\"\n      }\n      if (this.sortState === \"finishRun2\") {\n        var runNumber = oldNumber + (this.elementWidth * this.distance / speedFactor) + 1\n        if (number < runNumber) {\n          this.ijList[0].updateX(speedFactor, \"right\") // i moves right until it finds its position\n          this.ijList[1].updateX(speedFactor, \"right\") // j moves left until it fnds its position\n        }\n        if (number === runNumber) {\n          if (this.jPlus1Reference < this.elementArray.length) {\n            for (j = this.jPlus1Reference; j < this.elementArray.length; j++) {\n              this.elementArray[j].color = this.sortedColor\n            }\n          }\n          this.sortState = \"resetIAndJ\"\n        }\n      }\n    }\n    \n    partition(oldNumber, number, speedFactor) { // implementation of three above functions\n      if (this.sortState === \"calculatingDistance\" || this.sortState === \"movingIAndJ\") {\n        this.moveIAndJ(speedFactor, oldNumber, number)\n      }\n      else if (this.sortState === \"switching\") {\n        this.switchElements(speedFactor, oldNumber, number)\n      }\n      else if (this.sortState === \"resetIAndJ\") {\n        this.returnIAndJ()\n      }\n      else if (this.sortState === \"finishRun1\" || this.sortState === \"finishRun2\") {\n        this.finishRun(speedFactor, oldNumber, number)\n      }\n  }\n\n  animate() { // refreshes and draws canvas\n    if (!this.doAnim) { // halts animation\n      cancelAnimationFrame(this.myReq)\n        return\n    }\n    const canvas = this.canvasRef.current;\n    const c = canvas.getContext('2d');\n    requestAnimationFrame(this.animate)\n    c.clearRect(0, 0, window.innerWidth, window.innerHeight)\n    c.fillStyle = \"#1d7cdb\";\n    c.fillRect(0, 0, window.innerWidth, window.innerHeight);\n    for (var i in this.elementArray) {\n      this.elementArray[i].draw()\n    }\n    for (i in this.ijList) {\n      this.ijList[i].draw()\n    }\n    if (this.sortingFinished) {\n        for (i in this.elementArray) {\n          this.elementArray[i].color = this.sortedColor\n          this.elementArray[i].draw()\n        }\n        cancelAnimationFrame(this.myReq)\n        this.sortingFinished = true\n        return\n    }\n    this.partition(this.referenceNumber, this.number, this.speedFactor)\n    this.number += 1\n  }\n\n    start() {\n      if (!this.speedChosen) {\n        window.alert(\"Please choose a sorting speed.\")\n        return\n      }\n      if (this.firstPress) {\n        this.doAnim = true\n        this.speedFactor = this.nextSpeed\n        this.myReq = this.animate()\n        this.firstPress = false\n      }\n    }\n\n    pausePlay() {\n      if (!this.firstPress) {\n        this.doAnim = !this.doAnim\n        if (this.doAnim) {\n          this.myReq = this.animate()\n        }\n      }\n    }\n\n    reset() {\n\n      this.initialize()\n\n      this.firstPress = true\n\n    }\n\n    RadioButtonsGroup() {\n\n      const useStyles = makeStyles(() => ({\n        radioButtons: {\n            position: \"relative\",\n            top: \"10px\",\n            left: \"3px\",\n            display: \"block\"\n        }\n      }));\n\n      const classes = useStyles()\n\n      const BlueRadio = withStyles({\n          root: {\n            '&$checked': {\n              color: \"#1d7cdb\",\n            },\n          },\n          checked: {},\n        })((props) => <Radio color=\"default\" {...props} />);\n  \n      const [value, setValue] = React.useState(null);\n  \n      const handleChange = (event) => {\n          setValue(event.target.value);\n          this.nextSpeed = Number(event.target.value)\n          if (this.firstPress) {\n            this.speedFactor = Number(event.target.value)\n            this.speedChosen = true\n          }\n          if (!this.firstPress && !this.sortingFinished) {\n            window.alert('Please reset in order to switch speeds.')\n          }\n      };\n  \n      return (\n          <FormControl component=\"fieldset\">\n          <RadioGroup row aria-label=\"speeds\" name=\"speed1\" value={value} onChange={handleChange} className={classes.radioButtons}>\n              <FormControlLabel value=\"25\" control={<BlueRadio />} label=\"Fast\" />\n              <FormControlLabel value=\"12.5\" control={<BlueRadio />} label=\"Medium\" />\n              <FormControlLabel value=\"6.25\" control={<BlueRadio />} label=\"Slow\" />\n              <FormControlLabel value=\"3.125\" control={<BlueRadio />} label=\"Very Slow\" />\n          </RadioGroup>\n          \n          </FormControl>\n      );\n  }\n\n  FinalCanvas() {\n    const useStyles = makeStyles(() => ({\n      buttons: {\n          position: \"relative\",\n          top: \"20px\"\n      },\n      canvas: {\n        display: \"block\"\n      }\n    }));\n\n    const classes = useStyles()\n\n      return (\n          <div>\n              <canvas ref={this.canvasRef} width={this.canvasState.canvasWidth} height={this.canvasState.canvasHeight} className={classes.canvas} />\n              <this.RadioButtonsGroup />\n              <Box className={classes.buttons}>\n              <StyledButton id=\"action_button\" text=\"Sort\" function={this.start}></StyledButton>\n              <StyledButton id=\"action_button\" text=\"Pause\" function={this.pausePlay}></StyledButton>\n              <StyledButton id=\"action_button\" text=\"Reset\" function={this.reset}></StyledButton>\n              </Box>\n          </div>\n      );\n  }\n\n    componentDidMount() {\n      this.initialize()\n    }\n\n  \n\n  render() {\n    return(<this.FinalCanvas/>)\n  }\n}\n\nfunction BubbleSort() {\n\n  const theme = createMuiTheme();\n\n  const useStyles = makeStyles(() => ({\n    container: {\n        width: \"91.5%\",\n        margin: \"auto\",\n\n      },\n    canvas: {\n      marginBottom: \"15px\",\n      marginTop: \"10px\"\n    },\n    key: {\n      width: \"455px\",\n      height: \"200px\",\n      [theme.breakpoints.down('xs')]: {\n        height: \"300px\",\n        width: \"100px\"\n      },\n      borderColor: 'text.primary'\n    },\n    unsorted: {\n      width: \"25px\",\n      height: \"50px\",\n      borderColor: 'text.primary',\n      display: \"inline-block\",\n      position: \"relative\",\n      top: \"10px\",\n      //left: \"20px\"\n    },\n    pivot: {\n      width: \"25px\",\n      height: \"50px\",\n      backgroundColor: \"#E0B0FF\",\n      borderColor: 'text.primary',\n      display: \"inline-block\",\n      position: \"relative\",\n      left: \"205px\",\n      [theme.breakpoints.down('xs')]: {\n        left: \"-27px\",\n        top: \"230px\",\n      },\n      top: \"10px\"\n    },\n    sorted: {\n      width: \"25px\",\n      height: \"50px\",\n      backgroundColor: \"#6089f7\",\n      borderColor: 'text.primary',\n      display: \"inline-block\",\n      position: \"relative\",\n      top: \"120px\",\n      right: \"54px\"\n    },\n    label: {\n      position: \"absolute\",\n      top: \"10px\",\n      left: \"40px\",\n      width: \"200px\",\n      fontSize: \"20px\"\n    }\n  }));\n    \n    const classes = useStyles()\n\n  return (\n    <div style={{margin: 0}}>\n      <header className=\"App-header\"></header>\n\n      <Navbar/>\n      <div className={classes.container}>\n      <Box fontWeight=\"fontWeightBold\" fontSize=\"h3.fontSize\" fontFamily=\"Arial\">BubbleSort</Box>\n        <div className={classes.canvas}><Canvas/></div>\n        <Box className={classes.key}>\n          <Box className={classes.unsorted} border={1}><Typography className={classes.label}>Unsorted Element</Typography></Box>\n          <Box className={classes.pivot} border={1}><Typography className={classes.label}>Bubble Element</Typography></Box>\n          <Box className={classes.sorted} border={1}><Typography className={classes.label}>Sorted Element</Typography></Box>\n        </Box>\n        \n      </div>\n    </div>\n\n  );\n}\n\nexport default BubbleSort;","import React, {Component} from 'react';\nimport {makeStyles, createMuiTheme} from '@material-ui/core/styles';\nimport Navbar from './Components/navbar.js'\nimport StyledButton from './Components/styledbutton.js'\nimport Typography from '@material-ui/core/Typography'\nimport Box from '@material-ui/core/Box';\nimport Radio from '@material-ui/core/Radio';\nimport RadioGroup from '@material-ui/core/RadioGroup';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport FormControl from '@material-ui/core/FormControl';\nimport { withStyles } from '@material-ui/core/styles';\n\nclass Canvas extends Component {\n\n  constructor() {\n    super();\n    this.RadioButtonsGroup = this.RadioButtonsGroup.bind(this)\n    this.FinalCanvas = this.FinalCanvas.bind(this)\n    this.randomIntFromRange = this.randomIntFromRange.bind(this);\n    this.initialize = this.initialize.bind(this);\n    this.moveI = this.moveI.bind(this);\n    this.moveJ = this.moveJ.bind(this);\n    this.switchElements = this.switchElements.bind(this);\n    this.partition = this.partition.bind(this);\n    this.animate = this.animate.bind(this);\n    this.start = this.start.bind(this);\n    this.pausePlay = this.pausePlay.bind(this);\n    this.reset = this.reset.bind(this);\n    this.canvasRef = React.createRef();\n    // width height, and color of index boxes\n    this.elementWidth = 25\n    this.elementHeight = 50\n    this.elementColor = \"#fff\"\n    this.sortedColor = \"#6089f7\"\n    this.transitionColor = \"#E0B0FF\"\n\n    this.elementArray = [] // list for our number elements\n    this.insertingArray = []\n\n    // element generator creates and adds box elements to list\n    this.yValue = 220 / 2 // y value location of boxes on canvas\n    this.x0Value = this.elementWidth // x value location of first box on canvas\n    this.sortedList = []\n    this.ijList = []\n    this.ijValueArray = [0, 0]\n    this.arrayStack = null\n    this.distance = null\n    this.iDistance = null\n    this.jDistance = null\n    this.iRunNumber = null\n    this.jRunNumber = null\n    this.speedFactor = 25\n    this.referenceNumber = 0 // final refresh number of whatever the previous state was, needed to determine when the next state finishes\n    this.number = 0 // current number of screen refreshes, used to determine when current state ends\n    this.sortState = \"movingI\" // first state that the program finds itself in\n    this.myReq = null\n    this.doAnim = false\n    this.firstPress = true\n    this.speedChosen = false\n    this.nextSpeed = null\n    this.sortingFinished = false\n  }\n\n  canvasState = {\n      canvasWidth: window.innerWidth * 0.9,\n      canvasHeight: 220\n  }\n\n  // Helper function: returns a random number in range of two given numbers\n  randomIntFromRange(num1, num2) {\n  var distance = num2 + 1 - num1\n  var randomDistanceBetween = Math.random() * distance\n  var number = Math.floor(num1 + randomDistanceBetween)\n  return number\n  }\n\n  initialize() {\n\n    this.elementArray = [] // list for our number elements\n    this.insertingArray = []\n\n    // element generator creates and adds box elements to list\n    this.sortedList = []\n    this.ijList = []\n    this.ijValueArray = [0, 0]\n    this.arrayStack = null\n    this.distance = null\n    this.iDistance = null\n    this.jDistance = null\n    this.iRunNumber = null\n    this.jRunNumber = null\n    this.referenceNumber = 0 // final refresh number of whatever the previous state was, needed to determine when the next state finishes\n    this.number = 0 // current number of screen refreshes, used to determine when current state ends\n    this.sortState = \"movingI\" // first state that the program finds itself in\n    this.myReq = null\n    this.doAnim = false\n    this.firstPress = true\n    this.sortingFinished = false\n\n    const canvas = this.canvasRef.current;\n    const c = canvas.getContext('2d');\n    c.fillStyle = \"#1d7cdb\";\n    c.clearRect(0, 0, window.innerWidth, window.innerHeight)\n    c.fillRect(0, 0, this.canvasState.canvasWidth, this.canvasState.canvasHeight);\n\n\n\n      // --------------------------------- Box class------------------------------------------------\n\n  // dimensions for list indices that will be visualized on the canvas\n  class Box {\n    constructor(x, y, width, height, value, color) {\n      this.x = x // x coordinate of upper left corner\n      this.y = y // y coordinate of upper left croner\n      this.width = width  // width of index box\n      this.height = height // height of index box\n      this.value = value  // value stored in index box\n      this.color = color // color of box\n    }\n\n    draw() { // method that draws boxes with a value stored inside\n      c.beginPath()\n      c.rect(this.x, this.y, this.width, this.height)\n      c.fillStyle = this.color\n      c.fill()\n      c.stroke()\n      c.closePath()\n      c.beginPath()\n      c.font = \"11px Arial\"\n      c.fillStyle = \"black\"\n      if (this.value === \"i\" || this.value === \"j\") {\n        c.fillText(this.value, this.x + 0.46 * this.width, this.y + 0.6 * this.height)\n      }\n      else if (this.value < 10) {\n        c.fillText(this.value, this.x + 0.39 * this.width, this.y + 0.6 * this.height)\n      }\n      else if (10 <= this.value && this.value < 100) {\n        c.fillText(this.value, this.x + 0.26 * this.width, this.y + 0.6 * this.height)\n      }\n      else {\n        c.fillText(this.value, this.x + 0.125 * this.width, this.y + 0.6 * this.height)\n      }\n      c.fill()\n      c.closePath()\n    }\n\n    updateX(dx, direction) { // updates the x value of a box for next screen refresh by dx pixels\n      if (direction === \"left\") {\n        this.x -= dx\n      }\n      if (direction === \"right\") {\n        this.x += dx\n      }\n    }\n\n    updateY(dy, direction) { // updates the x value of a box for next screen refresh by dy pixels\n      if (direction === \"up\") {\n        this.y -= dy\n      }\n      if (direction === \"down\") {\n        this.y += dy\n      }\n    }\n  }\n\n  // -------------------------------------------------------------------------------------------\n\n  // ---------------------------- functions to be used in main program -------------------------\n\n  // Funtion that initializes the visual elements and what will be working behind the scenes\n    \n    var i = 0\n    while (i * this.elementWidth < canvas.width - (3 * this.elementWidth)) {\n      let xValue = this.x0Value + this.elementWidth * i // so boxes will be placed immediately next to each other\n      let listElement = new Box(xValue, this.yValue, this.elementWidth, this.elementHeight, this.randomIntFromRange(1, 999), this.elementColor)\n      this.elementArray.push(listElement)\n      this.sortedList.push(\"NS\")\n      i += 1\n    }\n\n    // i and j boxes are created\n    this.ijList.push(new Box(this.x0Value + this.ijValueArray[0] * this.elementWidth, this.yValue + this.elementHeight, this.elementWidth, this.elementHeight, \"i\", this.elementColor))\n    this.ijList.push(new Box(this.x0Value + this.ijValueArray[1] * this.elementWidth, this.yValue + this.elementHeight, this.elementWidth, this.elementHeight, \"j\", this.elementColor))\n\n    this.arrayStack = [this.elementArray] // sub-arrays will be placed in here to be sorted in the future\n    this.insertingArray = [this.elementArray[0]]\n\n    for (i in this.elementArray) {\n      this.elementArray[i].draw()\n    }\n    for (i in this.ijList) {\n      this.ijList[i].draw()\n    }\n    cancelAnimationFrame(this.myReq)\n    return\n    }\n\n    moveI(speedFactor, oldNumber, number) {\n      if (this.sortState === \"movingI\") {\n          if (oldNumber === 0) { // for the first animation state of the program\n            // rise and runNumbers in this program are calculated by the number of screen refreshes it takes for the element to get to where it needs to be at the \"speed\" it is travelling at (pixels moved per screen refresh) \n            var runNumber = oldNumber + (this.elementWidth / speedFactor)\n          }\n          else { // all other states of the program must account for number's (the variable) incrementation with each call to animate() later in the program\n            runNumber = oldNumber + (this.elementWidth / speedFactor) + 1\n          }\n          // rise and runNumbers in this program are calculated by the number of screen refreshes it takes for the element to get to where it needs to be at the \"speed\" it is travelling at (pixels moved per screen refresh)\n          if (number < runNumber) {\n            this.ijList[0].updateX(speedFactor, \"right\") // i moves right until it finds its position\n          }\n          // i and j values are incremented based upon their direction every time they pass an element\n          if (this.ijList[0].x % this.elementWidth === 0 && number < runNumber) {\n            this.ijValueArray[0] += 1\n          }\n          if (number === runNumber) {\n            this.referenceNumber = number // reference number takes on value of current refresh number\n            this.ijValueArray[1] = 0\n            this.ijList[1].x = this.x0Value\n            this.sortState = \"calculatingDistance\"\n          }\n      }\n    }\n\n    moveJ(speedFactor, oldNumber, number) {\n      if (this.sortState === \"calculatingDistance\") {\n        for (var j in this.insertingArray) {\n          if (this.elementArray[j].value > this.elementArray[this.ijValueArray[0]].value) {\n            this.jDistance = j\n            break\n          }\n          if (j === this.insertingArray.length - 1) {\n            this.jDistance = this.insertingArray.length - 1\n          }\n        }\n        this.sortState = \"movingJ\" \n      }\n      if (this.sortState === \"movingJ\") {\n        this.jRunNumber = oldNumber + (this.elementWidth * this.jDistance / speedFactor) + 1\n        // rise and runNumbers in this program are calculated by the number of screen refreshes it takes for the element to get to where it needs to be at the \"speed\" it is travelling at (pixels moved per screen refresh)\n        if (number < this.jRunNumber) {\n          this.ijList[1].updateX(speedFactor, \"right\") // i moves right until it finds its position\n        }\n        // i and j values are incremented based upon their direction every time they pass an element\n        if (this.ijList[1].x % this.elementWidth === 0 && number < this.jRunNumber) {\n          this.ijValueArray[1] += 1\n        }\n        if (number === this.jRunNumber) {\n          this.referenceNumber = number // reference number takes on value of current refresh number\n          this.sortState = \"switching\"\n        }\n      }\n    }\n\n    switchElements(speedFactor, oldNumber, number) {\n      this.distance = null\n      for (var j in this.insertingArray) {\n        if (this.elementArray[j].value > this.elementArray[this.ijValueArray[0]].value) {\n          this.distance = this.ijValueArray[0] - j\n          break\n        }\n      }\n      if (this.distance != null) {\n        var rightElement = this.elementArray[this.ijValueArray[0]]\n        var riseNumber = oldNumber + (this.elementHeight / speedFactor) + 1 // number that signals the end of the rising phase of the animation\n        var runRightNumber = riseNumber + (this.elementWidth / speedFactor) + 1\n        var runLeftNumber = riseNumber + (this.elementWidth * this.distance / speedFactor) + 1\n        var dropNumber = runLeftNumber + (this.elementHeight / speedFactor) + 1\n        if (number < riseNumber) { // rising phase of the switching animation\n          rightElement.updateY(speedFactor, \"up\") // right element rises above left\n        }\n        if (number > riseNumber && number < runRightNumber) { // running phase of the switching animation\n          for (j = this.ijValueArray[1]; j < this.insertingArray.length; j++) {\n            this.insertingArray[j].updateX(speedFactor, \"right\")\n          }\n        }\n        if (number > riseNumber && number < runLeftNumber) { // running phase of the switching animation\n          rightElement.updateX(speedFactor, \"left\")\n        }\n        if (number > runLeftNumber && number < dropNumber) { // dropping phase of the animation\n          rightElement.updateY(speedFactor, \"down\") // because right was above left\n        }\n        if (number === dropNumber) {\n          this.insertingArray.splice(this.ijValueArray[0] - this.distance, 0, rightElement)\n          this.elementArray = this.insertingArray.concat(this.elementArray.splice(this.ijValueArray[0]+1))\n          this.referenceNumber = number // reference number takes on value of current refresh number\n          if (this.ijValueArray[0] === this.elementArray.length - 1) {\n            this.sortingFinished = true\n            this.sortState = \"done\"\n          }\n          else {\n            this.sortState = \"movingI\"\n            this.ijValueArray[1] = 0\n            this.ijList[1].x = this.x0Value\n          }\n        }\n      }\n      else {\n        this.insertingArray.push(this.elementArray[this.ijValueArray[0]])\n        this.referenceNumber = number // reference number takes on value of current refresh number\n        if (this.ijValueArray[0] === this.elementArray.length - 1) {\n          this.sortingFinished = true\n          this.sortState = \"done\"\n        }\n        else {\n          this.ijValueArray[1] = 0\n            this.ijList[1].x = this.x0Value\n          this.sortState = \"movingI\"\n        }\n      }\n    }\n\n    partition(oldNumber, number, speedFactor) { // implementation of three above functions\n      if (this.sortState === \"movingI\") {\n        this.moveI(speedFactor, oldNumber, number)\n      }\n      else if (this.sortState === \"calculatingDistance\" || this.sortState === \"movingJ\") {\n        this.moveJ(speedFactor, oldNumber, number)\n      }\n      else if (this.sortState === \"switching\") {\n        this.switchElements(speedFactor, oldNumber, number)\n      }\n  }\n\n  animate() { // refreshes and draws canvas\n    if (!this.doAnim) { // halts animation\n      cancelAnimationFrame(this.myReq)\n      return\n    }\n    const canvas = this.canvasRef.current;\n    const c = canvas.getContext('2d');\n    requestAnimationFrame(this.animate)\n    c.clearRect(0, 0, window.innerWidth, window.innerHeight)\n    c.fillStyle = \"#1d7cdb\";\n    c.fillRect(0, 0, window.innerWidth, window.innerHeight);\n    for (var i in this.insertingArray) {\n      this.elementArray[i].color = this.transitionColor\n    }\n    for (i in this.elementArray) {\n      this.elementArray[i].draw()\n    }\n    for (i in this.ijList) {\n      this.ijList[i].draw()\n    }\n    if (this.sortingFinished) {\n        for (i in this.elementArray) {\n          this.elementArray[i].color = this.sortedColor\n          this.elementArray[i].draw()\n        }\n        cancelAnimationFrame(this.myReq)\n        return\n    }\n    this.partition(this.referenceNumber, this.number, this.speedFactor)\n    this.number += 1\n  }\n\n\n    start() {\n      if (!this.speedChosen) {\n        window.alert(\"Please choose a sorting speed.\")\n        return\n      }\n      if (this.firstPress) {\n        this.doAnim = true\n        this.speedFactor = this.nextSpeed\n        this.myReq = this.animate()\n        this.firstPress = false\n      }\n    }\n\n    pausePlay() {\n      if (!this.firstPress) {\n        this.doAnim = !this.doAnim\n        if (this.doAnim) {\n          this.myReq = this.animate()\n        }\n      }\n    }\n\n    reset() {\n\n      this.initialize()\n\n      this.firstPress = true\n\n    }\n\n    RadioButtonsGroup() {\n\n      const useStyles = makeStyles(() => ({\n        radioButtons: {\n            position: \"relative\",\n            top: \"10px\",\n            left: \"3px\",\n            display: \"block\"\n        }\n      }));\n\n      const classes = useStyles()\n\n      const BlueRadio = withStyles({\n          root: {\n            '&$checked': {\n              color: \"#1d7cdb\",\n            },\n          },\n          checked: {},\n        })((props) => <Radio color=\"default\" {...props} />);\n  \n      const [value, setValue] = React.useState(null);\n  \n      const handleChange = (event) => {\n          setValue(event.target.value);\n          this.nextSpeed = Number(event.target.value)\n          if (this.firstPress) {\n            this.speedFactor = Number(event.target.value)\n            this.speedChosen = true\n          }\n          if (!this.firstPress && !this.sortingFinished) {\n            window.alert('Please reset in order to switch speeds.')\n          }\n      };\n  \n      return (\n          <FormControl component=\"fieldset\">\n          <RadioGroup row aria-label=\"speeds\" name=\"speed1\" value={value} onChange={handleChange} className={classes.radioButtons}>\n              <FormControlLabel value=\"25\" control={<BlueRadio />} label=\"Fast\" />\n              <FormControlLabel value=\"12.5\" control={<BlueRadio />} label=\"Medium\" />\n              <FormControlLabel value=\"6.25\" control={<BlueRadio />} label=\"Slow\" />\n              <FormControlLabel value=\"3.125\" control={<BlueRadio />} label=\"Very Slow\" />\n          </RadioGroup>\n          \n          </FormControl>\n      );\n  }\n\n  FinalCanvas() {\n    const useStyles = makeStyles(() => ({\n      buttons: {\n          position: \"relative\",\n          top: \"20px\"\n      },\n      canvas: {\n        display: \"block\"\n      }\n    }));\n\n    const classes = useStyles()\n\n      return (\n          <div>\n              <canvas ref={this.canvasRef} width={this.canvasState.canvasWidth} height={this.canvasState.canvasHeight} className={classes.canvas} />\n              <this.RadioButtonsGroup />\n              <Box className={classes.buttons}>\n              <StyledButton id=\"action_button\" text=\"Sort\" function={this.start}></StyledButton>\n              <StyledButton id=\"action_button\" text=\"Pause\" function={this.pausePlay}></StyledButton>\n              <StyledButton id=\"action_button\" text=\"Reset\" function={this.reset}></StyledButton>\n              </Box>\n          </div>\n      );\n  }\n\n    componentDidMount() {\n      this.initialize()\n    }\n\n  \n\n  render() {\n    return(<this.FinalCanvas/>)\n  }\n}\n\nfunction InsertionSort() {\n\n  const theme = createMuiTheme();\n\n  const useStyles = makeStyles(() => ({\n    container: {\n        width: \"91.5%\",\n        margin: \"auto\",\n\n      },\n    canvas: {\n      marginBottom: \"15px\",\n      marginTop: \"10px\"\n    },\n    key: {\n      width: \"455px\",\n      height: \"200px\",\n      [theme.breakpoints.down('xs')]: {\n        height: \"300px\",\n        width: \"100px\"\n      },\n      borderColor: 'text.primary'\n    },\n    unsorted: {\n      width: \"25px\",\n      height: \"50px\",\n      borderColor: 'text.primary',\n      display: \"inline-block\",\n      position: \"relative\",\n      top: \"10px\",\n      //left: \"20px\"\n    },\n    pivot: {\n      width: \"25px\",\n      height: \"50px\",\n      backgroundColor: \"#E0B0FF\",\n      borderColor: 'text.primary',\n      display: \"inline-block\",\n      position: \"relative\",\n      left: \"205px\",\n      [theme.breakpoints.down('xs')]: {\n        left: \"-27px\",\n        top: \"230px\",\n      },\n      top: \"10px\"\n    },\n    sorted: {\n      width: \"25px\",\n      height: \"50px\",\n      backgroundColor: \"#6089f7\",\n      borderColor: 'text.primary',\n      display: \"inline-block\",\n      position: \"relative\",\n      top: \"120px\",\n      right: \"54px\"\n    },\n    label: {\n      position: \"absolute\",\n      top: \"10px\",\n      left: \"40px\",\n      width: \"200px\",\n      fontSize: \"20px\"\n    }\n  }));\n    \n    const classes = useStyles()\n\n  return (\n    <div style={{margin: 0}}>\n      <header className=\"App-header\"></header>\n\n      <Navbar/>\n      <div className={classes.container}>\n      <Box fontWeight=\"fontWeightBold\" fontSize=\"h3.fontSize\" fontFamily=\"Arial\">InsertionSort</Box>\n        <div className={classes.canvas}><Canvas/></div>\n        <Box className={classes.key}>\n          <Box className={classes.unsorted} border={1}><Typography className={classes.label}>Unsorted Element</Typography></Box>\n          <Box className={classes.pivot} border={1}><Typography className={classes.label}>Insertion Array</Typography></Box>\n          <Box className={classes.sorted} border={1}><Typography className={classes.label}>Sorted Array</Typography></Box>\n        </Box>\n        \n      </div>\n    </div>\n\n  );\n}\n\nexport default InsertionSort;","import React, {Component} from 'react';\nimport {makeStyles, createMuiTheme} from '@material-ui/core/styles';\nimport Navbar from './Components/navbar.js'\nimport StyledButton from './Components/styledbutton.js'\nimport Typography from '@material-ui/core/Typography'\nimport Box from '@material-ui/core/Box';\nimport Radio from '@material-ui/core/Radio';\nimport RadioGroup from '@material-ui/core/RadioGroup';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport FormControl from '@material-ui/core/FormControl';\nimport { withStyles } from '@material-ui/core/styles';\n\nclass Canvas extends Component {\n\n  constructor() {\n    super();\n    this.RadioButtonsGroup = this.RadioButtonsGroup.bind(this)\n    this.FinalCanvas = this.FinalCanvas.bind(this)\n    this.randomIntFromRange = this.randomIntFromRange.bind(this);\n    this.initialize = this.initialize.bind(this);\n    this.returnIAndJ = this.returnIAndJ.bind(this);\n    this.moveIAndJ = this.moveIAndJ.bind(this);\n    this.switchElements = this.switchElements.bind(this);\n    this.partition = this.partition.bind(this);\n    this.animate = this.animate.bind(this);\n    this.start = this.start.bind(this);\n    this.pausePlay = this.pausePlay.bind(this);\n    this.reset = this.reset.bind(this);\n    this.canvasRef = React.createRef();\n    // width height, and color of index boxes\n    this.elementWidth = 25\n    this.elementHeight = 50\n    this.elementColor = \"#fff\"\n    this.sortedColor = \"#6089f7\"\n    this.parentColor = \"#E0B0FF\"\n    this.childColor = \"#F08080\"\n\n    this.elementArray = [] // list for our number elements\n\n    // element generator creates and adds box elements to list\n    this.yValue = 220 / 2 // y value location of boxes on canvas\n    this.x0Value = this.elementWidth // x value location of first box on canvas\n    this.sortedList = []\n    this.ijList = []\n    this.ijValueArray = null\n    this.arrayStack = null\n    this.iDistance = null\n    this.jDistance = null\n    this.iRunNumber = null\n    this.jRunNumber = null\n    this.leftElement = null\n    this.rightElement = null\n    this.speedFactor = 25\n    this.referenceNumber = 0 // final refresh number of whatever the previous state was, needed to determine when the next state finishes\n    this.number = 0 // current number of screen refreshes, used to determine when current state ends\n    this.checkingNumber = null\n    this.sortState = \"createCheckingNumber\" // first state that the program finds itself in\n    this.myReq = null\n    this.doAnim = false\n    this.firstPress = true\n    this.speedChosen = false\n    this.nextSpeed = null\n    this.sortingFinished = false\n    this.iRunNumber = null\n    this.jRunNumber = null\n    this.sortedCount = 0\n  }\n\n  canvasState = {\n      canvasWidth: window.innerWidth * 0.9,\n      canvasHeight: 220\n  }\n\n  // Helper function: returns a random number in range of two given numbers\n  randomIntFromRange(num1, num2) {\n  var distance = num2 + 1 - num1\n  var randomDistanceBetween = Math.random() * distance\n  var number = Math.floor(num1 + randomDistanceBetween)\n  return number\n  }\n\n  initialize() {\n\n    this.elementArray = [] // list for our number elements\n\n    // element generator creates and adds box elements to list\n    this.sortedList = []\n    this.ijList = []\n    this.ijValueArray = null\n    this.arrayStack = null\n    this.iDistance = null\n    this.jDistance = null\n    this.iRunNumber = null\n    this.jRunNumber = null\n    this.leftElement = null\n    this.rightElement = null\n    this.referenceNumber = 0 // final refresh number of whatever the previous state was, needed to determine when the next state finishes\n    this.number = 0 // current number of screen refreshes, used to determine when current state ends\n    this.checkingNumber = null\n    this.sortState = \"createCheckingNumber\" // first state that the program finds itself in\n    this.myReq = null\n    this.doAnim = false\n    this.firstPress = true\n    this.sortingFinished = false\n    this.iRunNumber = null\n    this.jRunNumber = null\n    this.sortedCount = 0\n\n    const canvas = this.canvasRef.current;\n    const c = canvas.getContext('2d');\n    c.fillStyle = \"#1d7cdb\";\n    c.clearRect(0, 0, window.innerWidth, window.innerHeight)\n    c.fillRect(0, 0, this.canvasState.canvasWidth, this.canvasState.canvasHeight);\n\n\n\n      // --------------------------------- Box class------------------------------------------------\n\n  // dimensions for list indices that will be visualized on the canvas\n  class Box {\n    constructor(x, y, width, height, value, color) {\n      this.x = x // x coordinate of upper left corner\n      this.y = y // y coordinate of upper left croner\n      this.width = width  // width of index box\n      this.height = height // height of index box\n      this.value = value  // value stored in index box\n      this.color = color // color of box\n    }\n\n    draw() { // method that draws boxes with a value stored inside\n      c.beginPath()\n      c.rect(this.x, this.y, this.width, this.height)\n      c.fillStyle = this.color\n      c.fill()\n      c.stroke()\n      c.closePath()\n      c.beginPath()\n      c.font = \"11px Arial\"\n      c.fillStyle = \"black\"\n      if (this.value === \"i\" || this.value === \"j\") {\n        c.fillText(this.value, this.x + 0.46 * this.width, this.y + 0.6 * this.height)\n      }\n      else if (this.value < 10) {\n        c.fillText(this.value, this.x + 0.39 * this.width, this.y + 0.6 * this.height)\n      }\n      else if (10 <= this.value && this.value < 100) {\n        c.fillText(this.value, this.x + 0.26 * this.width, this.y + 0.6 * this.height)\n      }\n      else {\n        c.fillText(this.value, this.x + 0.125 * this.width, this.y + 0.6 * this.height)\n      }\n      c.fill()\n      c.closePath()\n    }\n\n    updateX(dx, direction) { // updates the x value of a box for next screen refresh by dx pixels\n      if (direction === \"left\") {\n        this.x -= dx\n      }\n      if (direction === \"right\") {\n        this.x += dx\n      }\n    }\n\n    updateY(dy, direction) { // updates the x value of a box for next screen refresh by dy pixels\n      if (direction === \"up\") {\n        this.y -= dy\n      }\n      if (direction === \"down\") {\n        this.y += dy\n      }\n    }\n  }\n\n  // -------------------------------------------------------------------------------------------\n\n  // ---------------------------- functions to be used in main program -------------------------\n\n  // Funtion that initializes the visual elements and what will be working behind the scenes\n\n    var i = 0\n    while (i * this.elementWidth < canvas.width - (3 * this.elementWidth)) {\n      let xValue = this.x0Value + this.elementWidth * i // so boxes will be placed immediately next to each other\n      let listElement = new Box(xValue, this.yValue, this.elementWidth, this.elementHeight, this.randomIntFromRange(1, 999), this.elementColor)\n      this.elementArray.push(listElement)\n      this.sortedList.push(\"NS\")\n      i += 1\n    }\n\n    if ((this.elementArray.length - 1) % 2 === 1) {\n      this.checkingNumber = (Math.floor((this.elementArray.length - 2)) / 2)\n    }\n    else {\n      this.checkingNumber = (Math.floor((this.elementArray.length - 3)) / 2)\n    }\n  \n    this.ijValueArray = [0, 1] // contains current positions of i and j, index 0 is i, index 1 is j\n\n    // i and j boxes are created\n    this.ijList.push(new Box(this.x0Value + this.ijValueArray[0] * this.elementWidth, this.yValue + this.elementHeight, this.elementWidth, this.elementHeight, \"i\", this.elementColor))\n    this.ijList.push(new Box(this.x0Value + this.ijValueArray[1] * this.elementWidth, this.yValue + this.elementHeight, this.elementWidth, this.elementHeight, \"j\", this.elementColor))\n\n    this.arrayStack = [this.elementArray] // sub-arrays will be placed in here to be sorted in the future\n\n    for (i in this.elementArray) {\n      this.elementArray[i].draw()\n    }\n    for (i in this.ijList) {\n      this.ijList[i].draw()\n    }\n    cancelAnimationFrame(this.myReq)\n    return\n    }\n\n    moveIAndJ(array, speedFactor, oldNumber, number) {\n      if (this.sortState === \"calculatingMaxValue\")  {\n        var parentValue = array[this.ijValueArray[0]].value\n        var leftChildValue = array[this.ijValueArray[1]].value\n        if (this.ijValueArray[1] !== array.length - 1 - this.sortedCount) {\n          var rightChildValue = array[this.ijValueArray[1] + 1].value\n          if (rightChildValue > leftChildValue) {\n            if (rightChildValue > parentValue) {\n              this.leftElement = array[this.ijValueArray[0]]\n              this.rightElement = array[this.ijValueArray[1] + 1]\n              array[this.ijValueArray[0]].color = this.parentColor\n              array[this.ijValueArray[1]].color = this.childColor\n              array[this.ijValueArray[1] + 1].color = this.childColor\n              this.sortState = \"movingJ\"\n            }\n            else {\n              this.sortState = \"calculatingDistance\"\n            }\n          }\n          else {\n            if (leftChildValue > parentValue) {\n              this.leftElement = array[this.ijValueArray[0]]\n              this.rightElement = array[this.ijValueArray[1]]\n              array[this.ijValueArray[0]].color = this.parentColor\n              array[this.ijValueArray[1]].color = this.childColor\n              array[this.ijValueArray[1] + 1].color = this.childColor\n              this.sortState = \"pre-switch\"\n            }\n            else {\n              this.sortState = \"calculatingDistance\"\n            }\n          }\n        }\n        else {\n          if (leftChildValue > parentValue) {\n            this.leftElement = array[this.ijValueArray[0]]\n            this.rightElement = array[this.ijValueArray[1]]\n            array[this.ijValueArray[0]].color = this.parentColor\n            array[this.ijValueArray[1]].color = this.childColor\n            this.sortState = \"pre-switch\"\n          }\n          else {\n            this.sortState = \"calculatingDistance\"\n          }\n        }\n      }\n      if (this.sortState === \"pre-switch\") {\n        var waitNumber = oldNumber + 1\n        if (number === waitNumber) {\n          this.referenceNumber = number\n          this.sortState = \"switching\"\n        }\n      }\n      if (this.sortState === \"movingJ\") {\n        var runNumber = oldNumber + (this.elementWidth / speedFactor) + 1\n        if (number < runNumber) { // running phase of the switching animation\n          this.ijList[1].updateX(speedFactor, \"right\")\n        }\n        if (this.ijList[1].x % this.elementWidth === 0 && number < runNumber) {\n          this.ijValueArray[1] += 1\n        }\n        if (number === runNumber) {\n          this.sortState = \"switching\"\n          this.referenceNumber = number\n        }\n      }\n      if (this.sortState === \"calculatingDistance\") {\n        if (this.ijValueArray[0] === 0) {\n          waitNumber = oldNumber + 1\n          if (number === waitNumber) {\n            this.referenceNumber = number\n            this.sortState = \"sortingSwitch\"\n            this.leftElement = array[0]\n            this.rightElement = array[array.length - 1 - this.sortedCount]\n          }\n        }\n        else {\n          this.iRunNumber = oldNumber + (this.elementWidth / speedFactor) + 1\n          if (array.length % 2 === 0) {\n            if (this.ijValueArray[1] % 2 === 1) {\n              this.jRunNumber = oldNumber + (2 * this.elementWidth / speedFactor) + 1\n            }\n            else {\n              this.jRunNumber = oldNumber + (3 * this.elementWidth / speedFactor) + 1\n            }\n          }\n          else {\n            if (this.ijValueArray[1] % 2 === 0) {\n              this.jRunNumber = oldNumber + (3 * this.elementWidth / speedFactor) + 1\n            }\n            else {\n              this.jRunNumber = oldNumber + (2 * this.elementWidth / speedFactor) + 1\n            }        }\n          this.sortState = \"movingIAndJ\"\n        }\n      }\n      if (this.sortState === \"movingIAndJ\") {\n        if (number < this.iRunNumber) { // running phase of the switching animation\n          this.ijList[0].updateX(speedFactor, \"left\")\n        }\n        if (number < this.jRunNumber) {\n          this.ijList[1].updateX(speedFactor, \"left\")\n        }\n        if (this.ijList[0].x % this.elementWidth === 0 && number < this.iRunNumber) {\n          this.ijValueArray[0] -= 1\n        }\n        if (this.ijList[1].x % this.elementWidth === 0 && number < this.jRunNumber) {\n          this.ijValueArray[1] -= 1\n        }\n        if (number === this.jRunNumber) {\n          this.referenceNumber = number\n          this.checkingNumber -= 1\n\n        this.sortState = \"calculatingMaxValue\"\n\n        }\n      }\n    }\n    \n    switchElements(array, speedFactor, oldNumber, number) {\n      \n      // left and right elements are selected based upon state\n      if (this.sortState === \"switching\" || this.sortState === \"sortingSwitch\") {\n        var distance = this.elementArray.indexOf(this.rightElement) - this.elementArray.indexOf(this.leftElement) // number of elements each element must travel across\n        var riseNumber = oldNumber + (this.elementHeight / speedFactor) + 1 // number that signals the end of the rising phase of the animation\n        var runNumber = riseNumber + (this.elementWidth * distance / speedFactor) + 1 // number that signals the end of the running phase of the animation\n        var dropNumber = runNumber + (this.elementHeight / speedFactor) + 1 // number that signals the end of the dropping phase of the animation\n        \n        if (distance === 0) { // when no switching animation is needed\n          riseNumber = oldNumber + 1\n          runNumber = oldNumber + 1\n          dropNumber = oldNumber + 1\n        }\n        \n        if (number < riseNumber) { // rising phase of the switching animation\n          this.leftElement.updateY(speedFactor, \"up\")\n          this.rightElement.updateY(2 * speedFactor, \"up\") // right element rises above left\n        }\n        if (number > riseNumber && number < runNumber) { // running phase of the switching animation\n          this.leftElement.updateX(speedFactor, \"right\")\n          this.rightElement.updateX(speedFactor, \"left\")\n        }\n        if (number > runNumber && number < dropNumber) { // dropping phase of the animation\n          this.leftElement.updateY(speedFactor, \"down\")\n          this.rightElement.updateY(2 * speedFactor, \"down\") // because right was above left\n        }\n        if (number === dropNumber) { // once animation is finished, the element values are switched behind the scenes\n          var temp1 = this.rightElement\n          var temp2 = this.leftElement\n          this.leftElement = temp1 // leftElement variable is changed to new left element\n          this.rightElement = temp2 // rightElement variable is changed to new right element\n          this.elementArray[this.elementArray.indexOf(temp1)] = temp2\n          this.elementArray[this.elementArray.indexOf(temp2)] = temp1\n          array[array.indexOf(temp1)] = temp2\n          array[array.indexOf(temp2)] = temp1\n          this.referenceNumber = number // reference number takes on value of current refresh number\n          for (var i in this.elementArray) {\n            if (this.elementArray[i].color === this.parentColor || this.elementArray[i].color === this.childColor) {\n              this.elementArray[i].color = this.elementColor\n            }\n          }\n          if (this.ijValueArray[0] === 0 && this.sortState === \"switching\") {\n            this.sortState = \"sortingSwitch\"\n            this.leftElement = array[0]\n            this.rightElement = array[array.length - 1 - this.sortedCount]\n          }\n          else {\n            if (this.ijValueArray[0] === 0) {\n              this.sortedCount += 1\n              this.rightElement.color = this.sortedColor\n              if (this.sortedCount === this.elementArray.length - 1) {\n                this.leftElement.color = this.sortedColor\n                this.rightElement.color = this.sortedColor\n                this.sortingFinished = true\n                this.sortState = \"done\"\n              }\n              else {\n                this.sortState = \"createCheckingNumber\"\n              }\n            }\n            else {\n              this.sortState = \"calculatingDistance\"\n            }\n          }\n        }\n      }\n    }\n    \n    returnIAndJ(array, speedFactor, oldNumber, number) {\n      if (this.sortState === \"createCheckingNumber\") {\n        this.checkingNumber = Math.ceil((array.length - 1 - this.sortedCount) / 2) - 1\n        this.iDistance = this.checkingNumber\n        if (array.length % 2 === 1) {\n          if (this.sortedCount % 2 === 0) {\n            this.jDistance = (array.length - 1) - this.ijValueArray[1] - 1 - this.sortedCount\n          }\n          else {\n            this.jDistance = (array.length - 1) - this.ijValueArray[1] - 1 - this.sortedCount + 1\n          }\n        }\n        else {\n          if (this.sortedCount % 2 === 0) {\n            this.jDistance = (array.length - 1) - this.ijValueArray[1] - this.sortedCount\n          }\n          else {\n            this.jDistance = (array.length - 1) - this.ijValueArray[1] - (this.sortedCount + 1)\n          }\n        }\n        this.sortState = \"calculatingDistance2\"\n      }\n      if (this.sortState === \"calculatingDistance2\") {\n        if (number === oldNumber) { // because \"createCheckingNumber\" does no animation\n          this.iRunNumber = oldNumber + (this.elementWidth * this.iDistance / speedFactor)\n          this.jRunNumber = oldNumber + (this.elementWidth * this.jDistance / speedFactor)\n        }\n        else {\n          this.iRunNumber = oldNumber + (this.elementWidth * this.iDistance / speedFactor) + 1\n          this.jRunNumber = oldNumber + (this.elementWidth * Math.abs(this.jDistance) / speedFactor) + 1\n        }\n        this.sortState = \"returningIAndJ\"\n      }\n      if (number < this.iRunNumber) {\n        this.ijList[0].updateX(speedFactor, \"right\")\n        if (this.ijList[0].x % this.elementWidth === 0 && number < this.iRunNumber) {\n          this.ijValueArray[0] += 1\n        }\n      }\n      if (number < this.jRunNumber) {\n        if (this.jDistance >= 0) {\n          this.ijList[1].updateX(speedFactor, \"right\")\n          if (this.ijList[1].x % this.elementWidth === 0 && number < this.jRunNumber) {\n            this.ijValueArray[1] += 1\n          }\n        }\n        else {\n          this.ijList[1].updateX(speedFactor, \"left\")\n          if (this.ijList[1].x % this.elementWidth === 0 && number < this.jRunNumber) {\n            this.ijValueArray[1] -= 1\n          }\n        }\n      }\n      if (number === this.jRunNumber) {\n        this.referenceNumber = number\n        this.sortState = \"calculatingMaxValue\"\n      }\n    }\n    partition(array, oldNumber, number, speedFactor) { // implementation of three above functions\n      if (this.sortState === \"calculatingMaxValue\" || this.sortState === \"movingJ\" || this.sortState === \"movingIAndJ\" || this.sortState  === \"calculatingDistance\" || this.sortState === \"pre-switch\") {\n        this.moveIAndJ(array, speedFactor, oldNumber, number)\n      }\n      \n      else if (this.sortState === \"switching\" || this.sortState === \"sortingSwitch\") {\n        this.switchElements(array, speedFactor, oldNumber, number)\n      }\n      else if (this.sortState === \"returningIAndJ\" || this.sortState === \"createCheckingNumber\") {\n        this.returnIAndJ(array, speedFactor, oldNumber, number)\n      }\n    }\n    \n    animate() { // refreshes and draws canvas\n      if (!this.doAnim) {\n        cancelAnimationFrame(this.myReq)\n        return\n      }\n      const canvas = this.canvasRef.current;\n      const c = canvas.getContext('2d');\n      requestAnimationFrame(this.animate)\n      c.clearRect(0, 0, window.innerWidth, window.innerHeight)\n      c.fillStyle = \"#1d7cdb\";\n      c.fillRect(0, 0, window.innerWidth, window.innerHeight);\n      for (var i in this.elementArray) {\n        this.elementArray[i].draw()\n      }\n      for (i in this.ijList) {\n        this.ijList[i].draw()\n      }\n      this.partition(this.arrayStack[0], this.referenceNumber, this.number, this.speedFactor)\n      this.number += 1\n    }\n    start() {\n      if (!this.speedChosen) {\n        window.alert(\"Please choose a sorting speed.\")\n        return\n      }\n      if (this.firstPress) {\n        this.doAnim = true\n        this.speedFactor = this.nextSpeed\n        this.myReq = this.animate()\n        this.firstPress = false\n      }\n    }\n\n    pausePlay() {\n      if (!this.firstPress) {\n        this.doAnim = !this.doAnim\n        if (this.doAnim) {\n          this.myReq = this.animate()\n        }\n      }\n    }\n\n    reset() {\n\n      this.initialize()\n\n      this.firstPress = true\n\n    }\n\n    RadioButtonsGroup() {\n\n      const useStyles = makeStyles(() => ({\n        radioButtons: {\n            position: \"relative\",\n            top: \"10px\",\n            left: \"3px\",\n            display: \"block\"\n        }\n      }));\n\n      const classes = useStyles()\n\n      const BlueRadio = withStyles({\n          root: {\n            '&$checked': {\n              color: \"#1d7cdb\",\n            },\n          },\n          checked: {},\n        })((props) => <Radio color=\"default\" {...props} />);\n  \n      const [value, setValue] = React.useState(null);\n  \n      const handleChange = (event) => {\n          setValue(event.target.value);\n          this.nextSpeed = Number(event.target.value)\n          if (this.firstPress) {\n            this.speedFactor = Number(event.target.value)\n            this.speedChosen = true\n          }\n          if (!this.firstPress && !this.sortingFinished) {\n            window.alert('Please reset in order to switch speeds.')\n          }\n      };\n  \n      return (\n          <FormControl component=\"fieldset\">\n          <RadioGroup row aria-label=\"speeds\" name=\"speed1\" value={value} onChange={handleChange} className={classes.radioButtons}>\n              <FormControlLabel value=\"25\" control={<BlueRadio />} label=\"Fast\" />\n              <FormControlLabel value=\"12.5\" control={<BlueRadio />} label=\"Medium\" />\n              <FormControlLabel value=\"6.25\" control={<BlueRadio />} label=\"Slow\" />\n              <FormControlLabel value=\"3.125\" control={<BlueRadio />} label=\"Very Slow\" />\n          </RadioGroup>\n          \n          </FormControl>\n      );\n  }\n\n  FinalCanvas() {\n    const useStyles = makeStyles(() => ({\n      buttons: {\n          position: \"relative\",\n          top: \"20px\"\n      },\n      canvas: {\n        display: \"block\"\n      }\n    }));\n\n    const classes = useStyles()\n\n      return (\n          <div>\n              <canvas ref={this.canvasRef} width={this.canvasState.canvasWidth} height={this.canvasState.canvasHeight} className={classes.canvas} />\n              <this.RadioButtonsGroup />\n              <Box className={classes.buttons}>\n              <StyledButton id=\"action_button\" text=\"Sort\" function={this.start}></StyledButton>\n              <StyledButton id=\"action_button\" text=\"Pause\" function={this.pausePlay}></StyledButton>\n              <StyledButton id=\"action_button\" text=\"Reset\" function={this.reset}></StyledButton>\n              </Box>\n          </div>\n      );\n  }\n\n    componentDidMount() {\n      this.initialize()\n    }\n\n  \n\n  render() {\n    return(<this.FinalCanvas/>)\n  }\n}\n\nfunction HeapSort() {\n\n  const theme = createMuiTheme();\n\n  const useStyles = makeStyles(() => ({\n    container: {\n        width: \"91.5%\",\n        margin: \"auto\",\n\n      },\n    canvas: {\n      marginBottom: \"15px\",\n      marginTop: \"10px\"\n    },\n    key: {\n      width: \"455px\",\n      height: \"200px\",\n      [theme.breakpoints.down('xs')]: {\n        height: \"400px\",\n        width: \"100px\"\n      },\n      borderColor: 'text.primary'\n    },\n    unsorted: {\n      width: \"25px\",\n      height: \"50px\",\n      borderColor: 'text.primary',\n      display: \"inline-block\",\n      position: \"relative\",\n      top: \"10px\",\n      //left: \"20px\"\n    },\n    parent: {\n      width: \"25px\",\n      height: \"50px\",\n      backgroundColor: \"#E0B0FF\",\n      borderColor: 'text.primary',\n      display: \"inline-block\",\n      position: \"relative\",\n      left: \"205px\",\n      [theme.breakpoints.down('xs')]: {\n        left: \"-27px\",\n        top: \"230px\",\n      },\n      top: \"10px\"\n    },\n    sorted: {\n      width: \"25px\",\n      height: \"50px\",\n      backgroundColor: \"#6089f7\",\n      borderColor: 'text.primary',\n      display: \"inline-block\",\n      position: \"relative\",\n      top: \"120px\",\n      right: \"54px\"\n    },\n    children: {\n      width: \"25px\",\n      height: \"50px\",\n      backgroundColor: \"#F08080\",\n      borderColor: 'text.primary',\n      display: \"inline-block\",\n      position: \"relative\",\n      top: \"120px\",\n      left: \"151px\",\n      [theme.breakpoints.down('xs')]: {\n        left: \"0px\",\n        top: \"280px\",\n      },\n    },\n    label: {\n      position: \"absolute\",\n      top: \"10px\",\n      left: \"40px\",\n      width: \"200px\",\n      fontSize: \"20px\"\n    }\n  }));\n    \n    const classes = useStyles()\n\n  return (\n    <div style={{margin: 0}}>\n      <header className=\"App-header\"></header>\n\n      <Navbar/>\n      <div className={classes.container}>\n      <Box fontWeight=\"fontWeightBold\" fontSize=\"h3.fontSize\" fontFamily=\"Arial\">HeapSort</Box>\n        <div className={classes.canvas}><Canvas/></div>\n        <Box className={classes.key}>\n          <Box className={classes.unsorted} border={1}><Typography className={classes.label}>Unsorted Element</Typography></Box>\n          <Box className={classes.parent} border={1}><Typography className={classes.label}>Parent Element</Typography></Box>\n          <Box className={classes.sorted} border={1}><Typography className={classes.label}>Sorted Element</Typography></Box>\n          <Box className={classes.children} border={1}><Typography className={classes.label}>Parent's Children</Typography></Box>\n        </Box>\n        \n      </div>\n    </div>\n\n  );\n}\n\nexport default HeapSort;","import React from 'react';\nimport { BrowserRouter, Route, Switch } from 'react-router-dom';\nimport Home from './home.js';\nimport QuickSort from './quickSort'\nimport BubbleSort from './bubbleSort.js';\nimport InsertionSort from './insertionSort.js';\nimport HeapSort from './heapSort.js';\n\nfunction App() {\n\n  return (\n    <BrowserRouter>\n    <Switch>  \n    <div>\n      <header className=\"App-header\"></header>\n      {\n        document.title = 'Mike\\'s Sorting Vsiualizer'\n      }\n      <Route path=\"/\" component={Home} exact/>\n      <Route path=\"/QuickSort\" component={QuickSort} exact/>\n      <Route path=\"/BubbleSort\" component={BubbleSort} exact/>\n      <Route path=\"/InsertionSort\" component={InsertionSort} exact/>\n      <Route path=\"/HeapSort\" component={HeapSort} exact/>\n    </div>\n    </Switch>\n    </BrowserRouter>\n\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n     <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}